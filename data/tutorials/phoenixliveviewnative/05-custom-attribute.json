{
  "hierarchy": {
    "modules": [
      {
        "projects": [
          {
            "reference": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/01-Initial-List",
            "sections": [
              {
                "kind": "task",
                "reference": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/01-Initial-List#Building-the-Backend"
              },
              {
                "kind": "task",
                "reference": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/01-Initial-List#Creating-the-App"
              },
              {
                "kind": "task",
                "reference": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/01-Initial-List#Build-the-List-UI"
              }
            ]
          },
          {
            "reference": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/02-Favorite-Button",
            "sections": [
              {
                "kind": "task",
                "reference": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/02-Favorite-Button#Updating-the-Backend"
              },
              {
                "kind": "task",
                "reference": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/02-Favorite-Button#Adding-the-Favorite-Button"
              }
            ]
          },
          {
            "reference": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/03-Navigation-and-Hero",
            "sections": [
              {
                "kind": "task",
                "reference": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/03-Navigation-and-Hero#Building-the-Detail-View"
              },
              {
                "kind": "task",
                "reference": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/03-Navigation-and-Hero#Adding-Navigation"
              }
            ]
          }
        ],
        "reference": "doc://PhoenixLiveViewNative/tutorials/YourFirstApp/Getting-Started"
      },
      {
        "projects": [
          {
            "reference": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/04-Custom-Element",
            "sections": [
              {
                "kind": "task",
                "reference": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/04-Custom-Element#Setting-Up-the-Registry"
              },
              {
                "kind": "task",
                "reference": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/04-Custom-Element#Update-the-GenServer"
              },
              {
                "kind": "task",
                "reference": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/04-Custom-Element#Building-the-View"
              },
              {
                "kind": "task",
                "reference": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/04-Custom-Element#Using-the-Element"
              }
            ]
          },
          {
            "reference": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/05-Custom-Attribute",
            "sections": [
              {
                "kind": "task",
                "reference": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/05-Custom-Attribute#Update-the-Backend"
              },
              {
                "kind": "task",
                "reference": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/05-Custom-Attribute#Implement-the-Attribute"
              }
            ]
          },
          {
            "reference": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/06-Custom-Loading-Screen",
            "sections": [
              {
                "kind": "task",
                "reference": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/06-Custom-Loading-Screen#Add-the-Loading-View"
              }
            ]
          }
        ],
        "reference": "doc://PhoenixLiveViewNative/tutorials/YourFirstApp/Customize-with-Swift"
      }
    ],
    "paths": [
      [
        "doc://PhoenixLiveViewNative/tutorials/YourFirstApp",
        "doc://PhoenixLiveViewNative/tutorials/YourFirstApp/$volume",
        "doc://PhoenixLiveViewNative/tutorials/YourFirstApp/Customize-with-Swift"
      ]
    ],
    "reference": "doc://PhoenixLiveViewNative/tutorials/YourFirstApp"
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/05-Custom-Attribute"
  },
  "kind": "project",
  "metadata": {
    "category": "Live View Native",
    "categoryPathComponent": "YourFirstApp",
    "role": "project",
    "title": "Add a Navigation Bar Button with a Custom Attribute"
  },
  "references": {
    "04-01-04-view.swift": {
      "content": [
        "import SwiftUI",
        "import PhoenixLiveViewNative",
        "",
        "struct MyRegistry: CustomRegistry {",
        "    enum TagName: String {",
        "        case catRating = \"cat-rating\"",
        "    }",
        "    typealias AttributeName = EmptyRegistry.None",
        "    ",
        "    static func lookup(_ name: TagName, element: Element, context: LiveContext<MyRegistry>) -> some View {",
        "        switch name {",
        "        case .catRating:",
        "            CatRatingView(element: element, context: context)",
        "        }",
        "    }",
        "}"
      ],
      "fileName": "MyRegistry.swift",
      "fileType": "swift",
      "highlights": [],
      "identifier": "04-01-04-view.swift",
      "syntax": "swift",
      "type": "file"
    },
    "04-04-01-change-score.ex": {
      "content": [
        "defmodule LvnTutorialWeb.CatLive do",
        "  use LvnTutorialWeb, :live_view",
        "  require EEx",
        "  alias LvnTutorial.FavoritesStore",
        "",
        "  EEx.function_from_file(",
        "    :def,",
        "    :render,",
        "    \"lib/lvn_tutorial_web/live/cat_live.ios.heex\",",
        "    [:assigns],",
        "    engine: Phoenix.LiveView.HTMLEngine",
        "  )",
        "",
        "  def mount(%{\"name\" => name}, _session, socket) do",
        "    {:ok, assign(socket, name: name, score: FavoritesStore.get_score(name))}",
        "  end",
        "",
        "  def handle_event(\"change-score\", score, socket) do",
        "    FavoritesStore.set_score(socket.assigns.name, score)",
        "    {:noreply, assign(socket, score: score)}",
        "  end",
        "end"
      ],
      "fileName": "lib/lvn_tutorial_web/live/cat_live.ex",
      "fileType": "ex",
      "highlights": [],
      "identifier": "04-04-01-change-score.ex",
      "syntax": "ex",
      "type": "file"
    },
    "04-04-02-cat-rating.ios.heex": {
      "content": [
        "<vstack nav-title={@name}>",
        "  <asyncimage src={\"/images/cats/#{@name}.jpg\"} frame-width=\"300\" frame-height=\"300\" />",
        "  <cat-rating score={@score} />",
        "</vstack>"
      ],
      "fileName": "lib/lvn_tutorial_web/live/cat_live.ios.heex",
      "fileType": "heex",
      "highlights": [],
      "identifier": "04-04-02-cat-rating.ios.heex",
      "syntax": "heex",
      "type": "file"
    },
    "05-00-intro-header.png": {
      "alt": "The cat detail screen with a filled star button in the top right corner.",
      "identifier": "05-00-intro-header.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "1x",
            "light"
          ],
          "url": "/images/05-00-intro-header.png"
        }
      ]
    },
    "05-01-01-assign.ex": {
      "content": [
        "defmodule LvnTutorialWeb.CatLive do",
        "  use LvnTutorialWeb, :live_view",
        "  require EEx",
        "  alias LvnTutorial.FavoritesStore",
        "",
        "  EEx.function_from_file(",
        "    :def,",
        "    :render,",
        "    \"lib/lvn_tutorial_web/live/cat_live.ios.heex\",",
        "    [:assigns],",
        "    engine: Phoenix.LiveView.HTMLEngine",
        "  )",
        "",
        "  def mount(%{\"name\" => name}, _session, socket) do",
        "    {:ok,",
        "     assign(socket,",
        "       name: name,",
        "       favorite: Enum.member?(FavoritesStore.get_favorites(), name),",
        "       score: FavoritesStore.get_score(name)",
        "     )}",
        "  end",
        "",
        "  def handle_event(\"change-score\", score, socket) do",
        "    FavoritesStore.set_score(socket.assigns.name, score)",
        "    {:noreply, assign(socket, score: score)}",
        "  end",
        "end"
      ],
      "fileName": "lib/lvn_tutorial_web/live/cat_live.ex",
      "fileType": "ex",
      "highlights": [
        {
          "line": 15
        },
        {
          "line": 16
        },
        {
          "line": 17
        },
        {
          "line": 18
        },
        {
          "line": 19
        },
        {
          "line": 20
        }
      ],
      "identifier": "05-01-01-assign.ex",
      "syntax": "ex",
      "type": "file"
    },
    "05-01-02-toggle-favorite.ex": {
      "content": [
        "defmodule LvnTutorialWeb.CatLive do",
        "  use LvnTutorialWeb, :live_view",
        "  require EEx",
        "  alias LvnTutorial.FavoritesStore",
        "",
        "  EEx.function_from_file(",
        "    :def,",
        "    :render,",
        "    \"lib/lvn_tutorial_web/live/cat_live.ios.heex\",",
        "    [:assigns],",
        "    engine: Phoenix.LiveView.HTMLEngine",
        "  )",
        "",
        "  def mount(%{\"name\" => name}, _session, socket) do",
        "    {:ok,",
        "     assign(socket,",
        "       name: name,",
        "       favorite: Enum.member?(FavoritesStore.get_favorites(), name),",
        "       score: FavoritesStore.get_score(name)",
        "     )}",
        "  end",
        "",
        "  def handle_event(\"change-score\", score, socket) do",
        "    FavoritesStore.set_score(socket.assigns.name, score)",
        "    {:noreply, assign(socket, score: score)}",
        "  end",
        "",
        "  def handle_event(\"toggle-favorite\", _, socket) do",
        "    new = FavoritesStore.toggle_favorite(socket.assigns.name)",
        "    {:noreply, assign(socket, favorite: Enum.member?(new, socket.assigns.name))}",
        "  end",
        "end"
      ],
      "fileName": "lib/lvn_tutorial_web/live/cat_live.ex",
      "fileType": "ex",
      "highlights": [
        {
          "line": 27
        },
        {
          "line": 28
        },
        {
          "line": 29
        },
        {
          "line": 30
        },
        {
          "line": 31
        }
      ],
      "identifier": "05-01-02-toggle-favorite.ex",
      "syntax": "ex",
      "type": "file"
    },
    "05-01-03-attribute.ios.heex": {
      "content": [
        "<vstack nav-title={@name} nav-favorite={to_string(@favorite)}>",
        "  <asyncimage src={\"/images/cats/#{@name}.jpg\"} frame-width=\"300\" frame-height=\"300\" />",
        "  <cat-rating score={@score} />",
        "</vstack>"
      ],
      "fileName": "lib/lvn_tutorial_web/live/cat_live.ios.heex",
      "fileType": "heex",
      "highlights": [
        {
          "line": 1
        }
      ],
      "identifier": "05-01-03-attribute.ios.heex",
      "syntax": "heex",
      "type": "file"
    },
    "05-02-01-attribute-name.swift": {
      "content": [
        "import SwiftUI",
        "import PhoenixLiveViewNative",
        "",
        "struct MyRegistry: CustomRegistry {",
        "    enum TagName: String {",
        "        case catRating = \"cat-rating\"",
        "    }",
        "    enum AttributeName: String, Equatable {",
        "        case navFavorite = \"nav-favorite\"",
        "    }",
        "    ",
        "    static func lookup(_ name: TagName, element: Element, context: LiveContext<MyRegistry>) -> some View {",
        "        switch name {",
        "        case .catRating:",
        "            CatRatingView(element: element, context: context)",
        "        }",
        "    }",
        "}"
      ],
      "fileName": "MyRegistry.swift",
      "fileType": "swift",
      "highlights": [
        {
          "line": 8
        },
        {
          "line": 9
        },
        {
          "line": 10
        }
      ],
      "identifier": "05-02-01-attribute-name.swift",
      "syntax": "swift",
      "type": "file"
    },
    "05-02-02-apply.swift": {
      "content": [
        "import SwiftUI",
        "import PhoenixLiveViewNative",
        "",
        "struct MyRegistry: CustomRegistry {",
        "    enum TagName: String {",
        "        case catRating = \"cat-rating\"",
        "    }",
        "    enum AttributeName: String, Equatable {",
        "        case navFavorite = \"nav-favorite\"",
        "    }",
        "    ",
        "    static func lookup(_ name: TagName, element: Element, context: LiveContext<MyRegistry>) -> some View {",
        "        switch name {",
        "        case .catRating:",
        "            CatRatingView(element: element, context: context)",
        "        }",
        "    }",
        "    ",
        "    static func applyCustomAttribute(_ name: AttributeName, value: String, element: Element, context: LiveContext<MyRegistry>) -> some View {",
        "        switch name {",
        "        case .navFavorite:",
        "            context.buildElement(element)",
        "                .modifier(NavFavoriteModifier(value: value, context: context))",
        "        }",
        "    }",
        "}"
      ],
      "fileName": "MyRegistry.swift",
      "fileType": "swift",
      "highlights": [
        {
          "line": 18
        },
        {
          "line": 19
        },
        {
          "line": 20
        },
        {
          "line": 21
        },
        {
          "line": 22
        },
        {
          "line": 23
        },
        {
          "line": 24
        },
        {
          "line": 25
        }
      ],
      "identifier": "05-02-02-apply.swift",
      "syntax": "swift",
      "type": "file"
    },
    "05-02-03-empty-modifier.swift": {
      "content": [
        "import SwiftUI",
        "import PhoenixLiveViewNative",
        "",
        "struct NavFavoriteModifier: ViewModifier {",
        "    func body(content: Content) -> some View {",
        "    }",
        "}"
      ],
      "fileName": "NavFavoriteModifier.swift",
      "fileType": "swift",
      "highlights": [],
      "identifier": "05-02-03-empty-modifier.swift",
      "syntax": "swift",
      "type": "file"
    },
    "05-02-04-properties.swift": {
      "content": [
        "import SwiftUI",
        "import PhoenixLiveViewNative",
        "",
        "struct NavFavoriteModifier: ViewModifier {",
        "    let value: String",
        "    let context: LiveContext<MyRegistry>",
        "    ",
        "    func body(content: Content) -> some View {",
        "    }",
        "}"
      ],
      "fileName": "NavFavoriteModifier.swift",
      "fileType": "swift",
      "highlights": [
        {
          "line": 5
        },
        {
          "line": 6
        },
        {
          "line": 7
        }
      ],
      "identifier": "05-02-04-properties.swift",
      "syntax": "swift",
      "type": "file"
    },
    "05-02-05-toolbar.swift": {
      "content": [
        "import SwiftUI",
        "import PhoenixLiveViewNative",
        "",
        "struct NavFavoriteModifier: ViewModifier {",
        "    let value: String",
        "    let context: LiveContext<MyRegistry>",
        "    ",
        "    func body(content: Content) -> some View {",
        "        content",
        "            .toolbar {",
        "                ToolbarItem(placement: .navigationBarTrailing) {",
        "                }",
        "            }",
        "    }",
        "}"
      ],
      "fileName": "NavFavoriteModifier.swift",
      "fileType": "swift",
      "highlights": [
        {
          "line": 9
        },
        {
          "line": 10
        },
        {
          "line": 11
        },
        {
          "line": 12
        },
        {
          "line": 13
        }
      ],
      "identifier": "05-02-05-toolbar.swift",
      "syntax": "swift",
      "type": "file"
    },
    "05-02-06-button.swift": {
      "content": [
        "import SwiftUI",
        "import PhoenixLiveViewNative",
        "",
        "struct NavFavoriteModifier: ViewModifier {",
        "    let value: String",
        "    let context: LiveContext<MyRegistry>",
        "    ",
        "    func body(content: Content) -> some View {",
        "        content",
        "            .toolbar {",
        "                ToolbarItem(placement: .navigationBarTrailing) {",
        "                    Button {",
        "                        Task {",
        "                            try? await context.coordinator.pushEvent(type: \"click\", event: \"toggle-favorite\", value: [:])",
        "                        }",
        "                    } label: {",
        "                        Image(systemName: value == \"true\" ? \"star.fill\" : \"star\")",
        "                    }",
        "                }",
        "            }",
        "    }",
        "}"
      ],
      "fileName": "NavFavoriteModifier.swift",
      "fileType": "swift",
      "highlights": [
        {
          "line": 12
        },
        {
          "line": 13
        },
        {
          "line": 14
        },
        {
          "line": 15
        },
        {
          "line": 16
        },
        {
          "line": 17
        },
        {
          "line": 18
        }
      ],
      "identifier": "05-02-06-button.swift",
      "syntax": "swift",
      "type": "file"
    },
    "05-02-07-preview.mp4": {
      "alt": null,
      "identifier": "05-02-07-preview.mp4",
      "poster": null,
      "type": "video",
      "variants": [
        {
          "traits": [
            "1x",
            "light"
          ],
          "url": "/videos/05-02-07-preview.mp4"
        }
      ]
    },
    "Xcode 13.3": {
      "identifier": "Xcode 13.3",
      "title": "Xcode 13.3",
      "type": "xcodeRequirement",
      "url": "https://developer.apple.com/download/applications/"
    },
    "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/01-Initial-List": {
      "abstract": [
        {
          "text": "In this tutorial, you’ll build a simple LiveView app to show a list of cute cats.",
          "type": "text"
        }
      ],
      "estimatedTime": "30min",
      "identifier": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/01-Initial-List",
      "kind": "project",
      "role": "project",
      "title": "Your First LiveView",
      "type": "topic",
      "url": "/tutorials/phoenixliveviewnative/01-initial-list"
    },
    "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/01-Initial-List#Build-the-List-UI": {
      "abstract": [
        {
          "text": "In this tutorial, you’ll build a simple LiveView app to show a list of cute cats.",
          "type": "text"
        }
      ],
      "identifier": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/01-Initial-List#Build-the-List-UI",
      "kind": "section",
      "role": "pseudoSymbol",
      "title": "Build the List UI",
      "type": "section",
      "url": "/tutorials/phoenixliveviewnative/01-initial-list#Build-the-List-UI"
    },
    "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/01-Initial-List#Building-the-Backend": {
      "abstract": [
        {
          "text": "In this tutorial, you’ll build a simple LiveView app to show a list of cute cats.",
          "type": "text"
        }
      ],
      "identifier": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/01-Initial-List#Building-the-Backend",
      "kind": "section",
      "role": "pseudoSymbol",
      "title": "Building the Backend",
      "type": "section",
      "url": "/tutorials/phoenixliveviewnative/01-initial-list#Building-the-Backend"
    },
    "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/01-Initial-List#Creating-the-App": {
      "abstract": [
        {
          "text": "In this tutorial, you’ll build a simple LiveView app to show a list of cute cats.",
          "type": "text"
        }
      ],
      "identifier": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/01-Initial-List#Creating-the-App",
      "kind": "section",
      "role": "pseudoSymbol",
      "title": "Creating the App",
      "type": "section",
      "url": "/tutorials/phoenixliveviewnative/01-initial-list#Creating-the-App"
    },
    "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/02-Favorite-Button": {
      "abstract": [
        {
          "text": "Now that you’ve built a simple app to display a list, let’s add a bit of interactivity. To each list row, we’ll add a favorite button that can be used to pin cats to the top of the list.",
          "type": "text"
        }
      ],
      "estimatedTime": "30min",
      "identifier": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/02-Favorite-Button",
      "kind": "project",
      "role": "project",
      "title": "Storing User Favorites",
      "type": "topic",
      "url": "/tutorials/phoenixliveviewnative/02-favorite-button"
    },
    "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/02-Favorite-Button#Adding-the-Favorite-Button": {
      "abstract": [
        {
          "text": "Now that you’ve built a simple app to display a list, let’s add a bit of interactivity. To each list row, we’ll add a favorite button that can be used to pin cats to the top of the list.",
          "type": "text"
        }
      ],
      "identifier": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/02-Favorite-Button#Adding-the-Favorite-Button",
      "kind": "section",
      "role": "pseudoSymbol",
      "title": "Adding the Favorite Button",
      "type": "section",
      "url": "/tutorials/phoenixliveviewnative/02-favorite-button#Adding-the-Favorite-Button"
    },
    "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/02-Favorite-Button#Updating-the-Backend": {
      "abstract": [
        {
          "text": "Now that you’ve built a simple app to display a list, let’s add a bit of interactivity. To each list row, we’ll add a favorite button that can be used to pin cats to the top of the list.",
          "type": "text"
        }
      ],
      "identifier": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/02-Favorite-Button#Updating-the-Backend",
      "kind": "section",
      "role": "pseudoSymbol",
      "title": "Updating the Backend",
      "type": "section",
      "url": "/tutorials/phoenixliveviewnative/02-favorite-button#Updating-the-Backend"
    },
    "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/03-Navigation-and-Hero": {
      "abstract": [
        {
          "text": "The list of cats is great, but the images are a little small. Let’s add a detail view so we can see them nice and big!",
          "type": "text"
        }
      ],
      "estimatedTime": "30min",
      "identifier": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/03-Navigation-and-Hero",
      "kind": "project",
      "role": "project",
      "title": "Navigation and Detail View",
      "type": "topic",
      "url": "/tutorials/phoenixliveviewnative/03-navigation-and-hero"
    },
    "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/03-Navigation-and-Hero#Adding-Navigation": {
      "abstract": [
        {
          "text": "The list of cats is great, but the images are a little small. Let’s add a detail view so we can see them nice and big!",
          "type": "text"
        }
      ],
      "identifier": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/03-Navigation-and-Hero#Adding-Navigation",
      "kind": "section",
      "role": "pseudoSymbol",
      "title": "Adding Navigation",
      "type": "section",
      "url": "/tutorials/phoenixliveviewnative/03-navigation-and-hero#Adding-Navigation"
    },
    "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/03-Navigation-and-Hero#Building-the-Detail-View": {
      "abstract": [
        {
          "text": "The list of cats is great, but the images are a little small. Let’s add a detail view so we can see them nice and big!",
          "type": "text"
        }
      ],
      "identifier": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/03-Navigation-and-Hero#Building-the-Detail-View",
      "kind": "section",
      "role": "pseudoSymbol",
      "title": "Building the Detail View",
      "type": "section",
      "url": "/tutorials/phoenixliveviewnative/03-navigation-and-hero#Building-the-Detail-View"
    },
    "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/04-Custom-Element": {
      "abstract": [
        {
          "text": "Let’s add a custom control that allows users to assign specific star ratings to cats in our app.",
          "type": "text"
        }
      ],
      "estimatedTime": "30min",
      "identifier": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/04-Custom-Element",
      "kind": "project",
      "role": "project",
      "title": "Add a Custom HTML Element",
      "type": "topic",
      "url": "/tutorials/phoenixliveviewnative/04-custom-element"
    },
    "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/04-Custom-Element#Building-the-View": {
      "abstract": [
        {
          "text": "Let’s add a custom control that allows users to assign specific star ratings to cats in our app.",
          "type": "text"
        }
      ],
      "identifier": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/04-Custom-Element#Building-the-View",
      "kind": "section",
      "role": "pseudoSymbol",
      "title": "Building the View",
      "type": "section",
      "url": "/tutorials/phoenixliveviewnative/04-custom-element#Building-the-View"
    },
    "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/04-Custom-Element#Setting-Up-the-Registry": {
      "abstract": [
        {
          "text": "Let’s add a custom control that allows users to assign specific star ratings to cats in our app.",
          "type": "text"
        }
      ],
      "identifier": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/04-Custom-Element#Setting-Up-the-Registry",
      "kind": "section",
      "role": "pseudoSymbol",
      "title": "Setting Up the Registry",
      "type": "section",
      "url": "/tutorials/phoenixliveviewnative/04-custom-element#Setting-Up-the-Registry"
    },
    "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/04-Custom-Element#Update-the-GenServer": {
      "abstract": [
        {
          "text": "Let’s add a custom control that allows users to assign specific star ratings to cats in our app.",
          "type": "text"
        }
      ],
      "identifier": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/04-Custom-Element#Update-the-GenServer",
      "kind": "section",
      "role": "pseudoSymbol",
      "title": "Update the GenServer",
      "type": "section",
      "url": "/tutorials/phoenixliveviewnative/04-custom-element#Update-the-GenServer"
    },
    "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/04-Custom-Element#Using-the-Element": {
      "abstract": [
        {
          "text": "Let’s add a custom control that allows users to assign specific star ratings to cats in our app.",
          "type": "text"
        }
      ],
      "identifier": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/04-Custom-Element#Using-the-Element",
      "kind": "section",
      "role": "pseudoSymbol",
      "title": "Using the Element",
      "type": "section",
      "url": "/tutorials/phoenixliveviewnative/04-custom-element#Using-the-Element"
    },
    "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/05-Custom-Attribute": {
      "abstract": [
        {
          "text": "Use a custom modifier to add a navigation bar button to the detail view.",
          "type": "text"
        }
      ],
      "estimatedTime": "30min",
      "identifier": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/05-Custom-Attribute",
      "kind": "project",
      "role": "project",
      "title": "Add a Navigation Bar Button with a Custom Attribute",
      "type": "topic",
      "url": "/tutorials/phoenixliveviewnative/05-custom-attribute"
    },
    "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/05-Custom-Attribute#Implement-the-Attribute": {
      "abstract": [
        {
          "text": "Use a custom modifier to add a navigation bar button to the detail view.",
          "type": "text"
        }
      ],
      "identifier": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/05-Custom-Attribute#Implement-the-Attribute",
      "kind": "section",
      "role": "pseudoSymbol",
      "title": "Implement the Attribute",
      "type": "section",
      "url": "/tutorials/phoenixliveviewnative/05-custom-attribute#Implement-the-Attribute"
    },
    "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/05-Custom-Attribute#Update-the-Backend": {
      "abstract": [
        {
          "text": "Use a custom modifier to add a navigation bar button to the detail view.",
          "type": "text"
        }
      ],
      "identifier": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/05-Custom-Attribute#Update-the-Backend",
      "kind": "section",
      "role": "pseudoSymbol",
      "title": "Update the Backend",
      "type": "section",
      "url": "/tutorials/phoenixliveviewnative/05-custom-attribute#Update-the-Backend"
    },
    "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/06-Custom-Loading-Screen": {
      "abstract": [
        {
          "text": "Add a more interesting loading screen that matches the style of your app.",
          "type": "text"
        }
      ],
      "estimatedTime": "30min",
      "identifier": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/06-Custom-Loading-Screen",
      "kind": "project",
      "role": "project",
      "title": "Style the Loading Screen to Match Your App",
      "type": "topic",
      "url": "/tutorials/phoenixliveviewnative/06-custom-loading-screen"
    },
    "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/06-Custom-Loading-Screen#Add-the-Loading-View": {
      "abstract": [
        {
          "text": "Add a more interesting loading screen that matches the style of your app.",
          "type": "text"
        }
      ],
      "identifier": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/06-Custom-Loading-Screen#Add-the-Loading-View",
      "kind": "section",
      "role": "pseudoSymbol",
      "title": "Add the Loading View",
      "type": "section",
      "url": "/tutorials/phoenixliveviewnative/06-custom-loading-screen#Add-the-Loading-View"
    },
    "doc://PhoenixLiveViewNative/tutorials/YourFirstApp": {
      "abstract": [
        {
          "text": "A step-by-step guide to building your first app with LiveViewNative. Learn how to display data, handle navigation, build interactions, and more.",
          "type": "text"
        }
      ],
      "identifier": "doc://PhoenixLiveViewNative/tutorials/YourFirstApp",
      "kind": "overview",
      "role": "overview",
      "title": "Your First LiveViewNative App",
      "type": "topic",
      "url": "/tutorials/yourfirstapp"
    },
    "doc://PhoenixLiveViewNative/tutorials/YourFirstApp/Customize-with-Swift": {
      "abstract": [],
      "identifier": "doc://PhoenixLiveViewNative/tutorials/YourFirstApp/Customize-with-Swift",
      "kind": "article",
      "role": "article",
      "title": "Customize with Swift",
      "type": "topic",
      "url": "/tutorials/yourfirstapp/customize-with-swift"
    },
    "doc://PhoenixLiveViewNative/tutorials/YourFirstApp/Getting-Started": {
      "abstract": [],
      "identifier": "doc://PhoenixLiveViewNative/tutorials/YourFirstApp/Getting-Started",
      "kind": "article",
      "role": "article",
      "title": "Getting Started",
      "type": "topic",
      "url": "/tutorials/yourfirstapp/getting-started"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [
    {
      "backgroundImage": "05-00-intro-header.png",
      "chapter": "Customize with Swift",
      "content": [
        {
          "inlineContent": [
            {
              "text": "Use a custom modifier to add a navigation bar button to the detail view.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "estimatedTimeInMinutes": 30,
      "image": "05-00-intro-header.png",
      "kind": "hero",
      "title": "Add a Navigation Bar Button with a Custom Attribute",
      "xcodeRequirement": "Xcode 13.3"
    },
    {
      "kind": "tasks",
      "tasks": [
        {
          "anchor": "Update-the-Backend",
          "contentSection": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Update the backend live view to allow it to display and change the favorite state.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "kind": "fullWidth"
            }
          ],
          "stepsSection": [
            {
              "caption": [],
              "code": "04-04-01-change-score.ex",
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Open the ",
                      "type": "text"
                    },
                    {
                      "code": "cat_live.ex",
                      "type": "codeVoice"
                    },
                    {
                      "text": " file.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "media": null,
              "runtimePreview": null,
              "type": "step"
            },
            {
              "caption": [],
              "code": "05-01-01-assign.ex",
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Update the ",
                      "type": "text"
                    },
                    {
                      "code": "mount",
                      "type": "codeVoice"
                    },
                    {
                      "text": " callback to add an assign for whether the cat has been favorited or not.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "media": null,
              "runtimePreview": null,
              "type": "step"
            },
            {
              "caption": [],
              "code": "05-01-02-toggle-favorite.ex",
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Then, add another event handler that the frontend will trigger to update the favorite state.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "media": null,
              "runtimePreview": null,
              "type": "step"
            },
            {
              "caption": [],
              "code": "04-04-02-cat-rating.ios.heex",
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Edit the ",
                      "type": "text"
                    },
                    {
                      "code": "cat_live.ios.heex",
                      "type": "codeVoice"
                    },
                    {
                      "text": " template.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "media": null,
              "runtimePreview": null,
              "type": "step"
            },
            {
              "caption": [
                {
                  "inlineContent": [
                    {
                      "text": "We use ",
                      "type": "text"
                    },
                    {
                      "code": "to_string",
                      "type": "codeVoice"
                    },
                    {
                      "text": " to convert the boolean assign into a string, because just using it as a boolean directs Phoenix to remove the attribute from the DOM when the value is ",
                      "type": "text"
                    },
                    {
                      "code": "false",
                      "type": "codeVoice"
                    },
                    {
                      "text": ". We want the attribute to always be there, so that the navigation bar button is always present.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "code": "05-01-03-attribute.ios.heex",
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Add the custom attribute ",
                      "type": "text"
                    },
                    {
                      "code": "nav-favorite",
                      "type": "codeVoice"
                    },
                    {
                      "text": " to the ",
                      "type": "text"
                    },
                    {
                      "code": "<vstack>",
                      "type": "codeVoice"
                    },
                    {
                      "text": ".",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "media": null,
              "runtimePreview": null,
              "type": "step"
            }
          ],
          "title": "Update the Backend"
        },
        {
          "anchor": "Implement-the-Attribute",
          "contentSection": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Add code for handling the ",
                      "type": "text"
                    },
                    {
                      "code": "nav-favorite",
                      "type": "codeVoice"
                    },
                    {
                      "text": " attribute to your custom registry.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "kind": "fullWidth"
            }
          ],
          "stepsSection": [
            {
              "caption": [],
              "code": "04-01-04-view.swift",
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Edit your custom registry implementation.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "media": null,
              "runtimePreview": null,
              "type": "step"
            },
            {
              "caption": [],
              "code": "05-02-01-attribute-name.swift",
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Replace the ",
                      "type": "text"
                    },
                    {
                      "code": "AttributeName",
                      "type": "codeVoice"
                    },
                    {
                      "text": " type alias with a new enum of the same name. This enum, similar to the ",
                      "type": "text"
                    },
                    {
                      "code": "TagName",
                      "type": "codeVoice"
                    },
                    {
                      "text": " one, defines the attributes that your registry supports.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "media": null,
              "runtimePreview": null,
              "type": "step"
            },
            {
              "caption": [
                {
                  "inlineContent": [
                    {
                      "text": "In the method, we’ll switch over the name of the attribute, and if it’s the ",
                      "type": "text"
                    },
                    {
                      "code": "nav-favorite",
                      "type": "codeVoice"
                    },
                    {
                      "text": " attribute, apply the ",
                      "type": "text"
                    },
                    {
                      "code": "NavFavoriteModifier",
                      "type": "codeVoice"
                    },
                    {
                      "text": ". As with the ",
                      "type": "text"
                    },
                    {
                      "code": "lookup",
                      "type": "codeVoice"
                    },
                    {
                      "text": " method, don’t include a default branch so that the compiler ensures your switch is exhaustive.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "code": "05-02-02-apply.swift",
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Implement the ",
                      "type": "text"
                    },
                    {
                      "code": "applyCustomAttribute",
                      "type": "codeVoice"
                    },
                    {
                      "text": " method. This method is invoked by the framework whenever it encounters an attribute that your registry has declared support for.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "media": null,
              "runtimePreview": null,
              "type": "step"
            },
            {
              "inlineContent": [
                {
                  "text": "We could add the navigation bar button directly in the ",
                  "type": "text"
                },
                {
                  "code": "applyCustomAttribute",
                  "type": "codeVoice"
                },
                {
                  "text": " method, but as you add more custom attributes, it’s useful to keep them separated. So, we’ll use another struct that implements SwiftUI’s ",
                  "type": "text"
                },
                {
                  "code": "ViewModifier",
                  "type": "codeVoice"
                },
                {
                  "text": " protocol.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            },
            {
              "caption": [],
              "code": "05-02-03-empty-modifier.swift",
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Create a struct called ",
                      "type": "text"
                    },
                    {
                      "code": "NavFavoriteModifier",
                      "type": "codeVoice"
                    },
                    {
                      "text": " that implements the ",
                      "type": "text"
                    },
                    {
                      "code": "ViewModifier",
                      "type": "codeVoice"
                    },
                    {
                      "text": " protocol.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "media": null,
              "runtimePreview": null,
              "type": "step"
            },
            {
              "caption": [
                {
                  "inlineContent": [
                    {
                      "text": "The value will be used to show the current state of the favorite button, and the context will let us access the coordinator so we can send an event when the btuton’s tapped.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "code": "05-02-04-properties.swift",
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Add the ",
                      "type": "text"
                    },
                    {
                      "code": "value",
                      "type": "codeVoice"
                    },
                    {
                      "text": " and ",
                      "type": "text"
                    },
                    {
                      "code": "context",
                      "type": "codeVoice"
                    },
                    {
                      "text": " properties to the modifier struct.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "media": null,
              "runtimePreview": null,
              "type": "step"
            },
            {
              "caption": [],
              "code": "05-02-05-toolbar.swift",
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "In the body method, we’ll take the content and add to it a toolbar item placed in the trailing position of the navigation bar.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "media": null,
              "runtimePreview": null,
              "type": "step"
            },
            {
              "caption": [
                {
                  "inlineContent": [
                    {
                      "text": "With that, you can re-run the app and observe the new attribute in action!",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "code": "05-02-06-button.swift",
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The button inside the toolbar item will display a filled or unfilled star, depending on the current state. When the button is tapped, it will trigger the ",
                      "type": "text"
                    },
                    {
                      "code": "toggle-favorite",
                      "type": "codeVoice"
                    },
                    {
                      "text": " we set up before on the backend. We pass an empty dictionary as the value for the event, since there’s no other data we need to send.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "media": null,
              "runtimePreview": "05-02-07-preview.mp4",
              "type": "step"
            }
          ],
          "title": "Implement the Attribute"
        }
      ]
    },
    {
      "abstract": [
        {
          "text": "Add a more interesting loading screen that matches the style of your app.",
          "type": "text"
        }
      ],
      "action": {
        "identifier": "doc://PhoenixLiveViewNative/tutorials/PhoenixLiveViewNative/06-Custom-Loading-Screen",
        "isActive": true,
        "overridingTitle": "Get started",
        "overridingTitleInlineContent": [
          {
            "text": "Get started",
            "type": "text"
          }
        ],
        "type": "reference"
      },
      "featuredEyebrow": "Tutorial",
      "kind": "callToAction",
      "title": "Style the Loading Screen to Match Your App"
    }
  ],
  "variants": [
    {
      "paths": [
        "/tutorials/phoenixliveviewnative/05-custom-attribute"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}