{
  "hierarchy" : {
    "modules" : [
      {
        "projects" : [
          {
            "reference" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/01-Initial-List",
            "sections" : [
              {
                "kind" : "task",
                "reference" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/01-Initial-List#Building-the-Backend"
              },
              {
                "kind" : "task",
                "reference" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/01-Initial-List#Creating-the-App"
              },
              {
                "kind" : "task",
                "reference" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/01-Initial-List#Build-the-List-UI"
              }
            ]
          },
          {
            "reference" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/02-Favorite-Button",
            "sections" : [
              {
                "kind" : "task",
                "reference" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/02-Favorite-Button#Updating-the-Backend"
              },
              {
                "kind" : "task",
                "reference" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/02-Favorite-Button#Adding-the-Favorite-Button"
              }
            ]
          },
          {
            "reference" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/03-Navigation-and-Hero",
            "sections" : [
              {
                "kind" : "task",
                "reference" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/03-Navigation-and-Hero#Building-the-Detail-View"
              },
              {
                "kind" : "task",
                "reference" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/03-Navigation-and-Hero#Adding-Navigation"
              }
            ]
          }
        ],
        "reference" : "doc:\/\/LiveViewNative\/tutorials\/YourFirstApp\/Getting-Started"
      },
      {
        "projects" : [
          {
            "reference" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/04-Custom-Element",
            "sections" : [
              {
                "kind" : "task",
                "reference" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/04-Custom-Element#Setting-Up-the-Registry"
              },
              {
                "kind" : "task",
                "reference" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/04-Custom-Element#Update-the-GenServer"
              },
              {
                "kind" : "task",
                "reference" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/04-Custom-Element#Building-the-View"
              },
              {
                "kind" : "task",
                "reference" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/04-Custom-Element#Using-the-Element"
              }
            ]
          },
          {
            "reference" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/05-Custom-Modifier",
            "sections" : [
              {
                "kind" : "task",
                "reference" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/05-Custom-Modifier#Update-the-Backend"
              },
              {
                "kind" : "task",
                "reference" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/05-Custom-Modifier#Implement-the-Attribute"
              }
            ]
          },
          {
            "reference" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/06-Custom-Loading-Screen",
            "sections" : [
              {
                "kind" : "task",
                "reference" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/06-Custom-Loading-Screen#Add-the-Loading-View"
              }
            ]
          }
        ],
        "reference" : "doc:\/\/LiveViewNative\/tutorials\/YourFirstApp\/Customize-with-Swift"
      }
    ],
    "paths" : [
      [
        "doc:\/\/LiveViewNative\/tutorials\/YourFirstApp",
        "doc:\/\/LiveViewNative\/tutorials\/YourFirstApp\/$volume",
        "doc:\/\/LiveViewNative\/tutorials\/YourFirstApp\/Customize-with-Swift"
      ]
    ],
    "reference" : "doc:\/\/LiveViewNative\/tutorials\/YourFirstApp"
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/05-Custom-Modifier"
  },
  "kind" : "project",
  "metadata" : {
    "category" : "Live View Native",
    "categoryPathComponent" : "YourFirstApp",
    "role" : "project",
    "title" : "Add a Navigation Bar Button with a Custom Modifier"
  },
  "references" : {
    "01-01-05-config.exs" : {
      "content" : [
        "# This file is responsible for configuring your application",
        "# and its dependencies with the aid of the Config module.",
        "#",
        "# This configuration file is loaded before any dependency and",
        "# is restricted to this project.",
        "",
        "# General application configuration",
        "import Config",
        "",
        "config :live_view_native, :platforms, [LiveViewNativeSwiftUi.Platform]",
        "",
        "config :live_view_native, LiveViewNativeSwiftUi.Platform,",
        "  app_name: \"LVNTutorial\",",
        "  custom_modifiers: []",
        "",
        "# Configures the endpoint",
        "config :lvn_tutorial, LvnTutorialWeb.Endpoint,",
        "  url: [host: \"localhost\"],",
        "  render_errors: [",
        "    formats: [html: LvnTutorialWeb.ErrorHTML, json: LvnTutorialWeb.ErrorJSON],",
        "    layout: false",
        "  ],",
        "  pubsub_server: LvnTutorial.PubSub,",
        "  live_view: [signing_salt: \"0p4irQ9b\"]",
        "",
        "# Configure esbuild (the version is required)",
        "config :esbuild,",
        "  version: \"0.17.11\",",
        "  default: [",
        "    args:",
        "      ~w(js\/app.js --bundle --target=es2017 --outdir=..\/priv\/static\/assets --external:\/fonts\/* --external:\/images\/*),",
        "    cd: Path.expand(\"..\/assets\", __DIR__),",
        "    env: %{\"NODE_PATH\" => Path.expand(\"..\/deps\", __DIR__)}",
        "  ]",
        "",
        "# Configure tailwind (the version is required)",
        "config :tailwind,",
        "  version: \"3.2.7\",",
        "  default: [",
        "    args: ~w(",
        "      --config=tailwind.config.js",
        "      --input=css\/app.css",
        "      --output=..\/priv\/static\/assets\/app.css",
        "    ),",
        "    cd: Path.expand(\"..\/assets\", __DIR__)",
        "  ]",
        "",
        "# Configures Elixir's Logger",
        "config :logger, :console,",
        "  format: \"$time $metadata[$level] $message\\n\",",
        "  metadata: [:request_id]",
        "",
        "# Use Jason for JSON parsing in Phoenix",
        "config :phoenix, :json_library, Jason",
        "",
        "# Import environment specific config. This must remain at the bottom",
        "# of this file so it overrides the configuration defined above.",
        "import_config \"#{config_env()}.exs\""
      ],
      "fileName" : "config\/config.exs",
      "fileType" : "exs",
      "highlights" : [

      ],
      "identifier" : "01-01-05-config.exs",
      "syntax" : "exs",
      "type" : "file"
    },
    "04-01-03-view.swift" : {
      "content" : [
        "import SwiftUI",
        "import LiveViewNative",
        "",
        "struct MyRegistry: RootRegistry {",
        "    enum TagName: String {",
        "        case catRating = \"CatRating\"",
        "    }",
        "    ",
        "    static func lookup(_ name: TagName, element: ElementNode) -> some View {",
        "        switch name {",
        "        case .catRating:",
        "            CatRatingView()",
        "        }",
        "    }",
        "}"
      ],
      "fileName" : "MyRegistry.swift",
      "fileType" : "swift",
      "highlights" : [

      ],
      "identifier" : "04-01-03-view.swift",
      "syntax" : "swift",
      "type" : "file"
    },
    "04-04-03-cat_live.ex" : {
      "content" : [
        "defmodule LvnTutorialWeb.CatLive do",
        "  use LvnTutorialWeb, :live_view",
        "  use LiveViewNative.LiveView",
        "",
        "  def mount(%{\"name\" => name}, _session, socket) do",
        "    {:ok, assign(socket, name: name)}",
        "  end",
        "",
        "  def render(%{platform_id: :web} = assigns) do",
        "    ~H\"\"",
        "  end",
        "",
        "  def render(%{platform_id: :swiftui} = assigns) do",
        "    ~Z\"\"\"",
        "    <VStack modifiers={navigation_title(@native, title: @name)}>",
        "      <AsyncImage url={\"\/images\/cats\/#{@name}.jpg\"} modifiers={frame(@native, width: 300, height: 300)} \/>",
        "      <CatRating score={@score} \/>",
        "    <\/VStack>",
        "    \"\"\"swiftui",
        "  end",
        "",
        "  def handle_event(\"change-score\", score, socket) do",
        "    FavoritesStore.set_score(socket.assigns.name, score)",
        "    {:noreply, assign(socket, score: score)}",
        "  end",
        "end"
      ],
      "fileName" : "lib\/lvn_tutorial_web\/live\/cat_live.ex",
      "fileType" : "ex",
      "highlights" : [

      ],
      "identifier" : "04-04-03-cat_live.ex",
      "syntax" : "elixir",
      "type" : "file"
    },
    "05-00-intro-header.png" : {
      "alt" : "The cat detail screen with a filled star button in the top right corner.",
      "identifier" : "05-00-intro-header.png",
      "type" : "image",
      "variants" : [
        {
          "traits" : [
            "1x",
            "light"
          ],
          "url" : "\/images\/05-00-intro-header.png"
        }
      ]
    },
    "05-01-02-cat_live.ex" : {
      "content" : [
        "defmodule LvnTutorialWeb.CatLive do",
        "  use LvnTutorialWeb, :live_view",
        "  use LiveViewNative.LiveView",
        "  alias LvnTutorial.FavoritesStore",
        "",
        "  def mount(%{\"name\" => name}, _session, socket) do",
        "    {:ok,",
        "     assign(socket,",
        "       name: name,",
        "       favorite: Enum.member?(FavoritesStore.get_favorites(), name),",
        "       score: FavoritesStore.get_score(name)",
        "     )}",
        "  end",
        "",
        "  def render(%{platform_id: :web} = assigns) do",
        "    ~H\"\"",
        "  end",
        "",
        "  def render(%{platform_id: :swiftui} = assigns) do",
        "    ~Z\"\"\"",
        "    <VStack modifiers={navigation_title(@native, title: @name)}>",
        "      <AsyncImage url={\"\/images\/cats\/#{@name}.jpg\"} modifiers={frame(@native, width: 300, height: 300)} \/>",
        "      <CatRating score={@score} \/>",
        "    <\/VStack>",
        "    \"\"\"swiftui",
        "  end",
        "",
        "  def handle_event(\"change-score\", score, socket) do",
        "    FavoritesStore.set_score(socket.assigns.name, score)",
        "    {:noreply, assign(socket, score: score)}",
        "  end",
        "end"
      ],
      "fileName" : "lib\/lvn_tutorial_web\/live\/cat_live.ex",
      "fileType" : "ex",
      "highlights" : [
        {
          "line" : 4
        },
        {
          "line" : 7
        },
        {
          "line" : 8
        },
        {
          "line" : 9
        },
        {
          "line" : 10
        },
        {
          "line" : 11
        },
        {
          "line" : 12
        }
      ],
      "identifier" : "05-01-02-cat_live.ex",
      "syntax" : "elixir",
      "type" : "file"
    },
    "05-01-03-cat_live.ex" : {
      "content" : [
        "defmodule LvnTutorialWeb.CatLive do",
        "  use LvnTutorialWeb, :live_view",
        "  use LiveViewNative.LiveView",
        "  alias LvnTutorial.FavoritesStore",
        "",
        "  def mount(%{\"name\" => name}, _session, socket) do",
        "    {:ok,",
        "     assign(socket,",
        "       name: name,",
        "       favorite: Enum.member?(FavoritesStore.get_favorites(), name),",
        "       score: FavoritesStore.get_score(name)",
        "     )}",
        "  end",
        "",
        "  def render(%{platform_id: :web} = assigns) do",
        "    ~H\"\"",
        "  end",
        "",
        "  def render(%{platform_id: :swiftui} = assigns) do",
        "    ~Z\"\"\"",
        "    <VStack modifiers={navigation_title(@native, title: @name)}>",
        "      <AsyncImage url={\"\/images\/cats\/#{@name}.jpg\"} modifiers={frame(@native, width: 300, height: 300)} \/>",
        "      <CatRating score={@score} \/>",
        "    <\/VStack>",
        "    \"\"\"swiftui",
        "  end",
        "",
        "  def handle_event(\"change-score\", score, socket) do",
        "    FavoritesStore.set_score(socket.assigns.name, score)",
        "    {:noreply, assign(socket, score: score)}",
        "  end",
        "",
        "  def handle_event(\"toggle-favorite\", _, socket) do",
        "    new = FavoritesStore.toggle_favorite(socket.assigns.name)",
        "    {:noreply, assign(socket, favorite: Enum.member?(new, socket.assigns.name))}",
        "  end",
        "end"
      ],
      "fileName" : "lib\/lvn_tutorial_web\/live\/cat_live.ex",
      "fileType" : "ex",
      "highlights" : [
        {
          "line" : 32
        },
        {
          "line" : 33
        },
        {
          "line" : 34
        },
        {
          "line" : 35
        },
        {
          "line" : 36
        }
      ],
      "identifier" : "05-01-03-cat_live.ex",
      "syntax" : "elixir",
      "type" : "file"
    },
    "05-01-04-cat_live.ex" : {
      "content" : [
        "defmodule LvnTutorialWeb.CatLive do",
        "  use LvnTutorialWeb, :live_view",
        "  use LiveViewNative.LiveView",
        "  alias LvnTutorial.FavoritesStore",
        "",
        "  def mount(%{\"name\" => name}, _session, socket) do",
        "    {:ok,",
        "     assign(socket,",
        "       name: name,",
        "       favorite: Enum.member?(FavoritesStore.get_favorites(), name),",
        "       score: FavoritesStore.get_score(name)",
        "     )}",
        "  end",
        "",
        "  def render(%{platform_id: :web} = assigns) do",
        "    ~H\"\"",
        "  end",
        "",
        "  def render(%{platform_id: :swiftui} = assigns) do",
        "    ~Z\"\"\"",
        "    <VStack modifiers={@native |> navigation_title(title: @name) |> nav_favorite(is_favorite: @favorite)}>",
        "      <AsyncImage url={\"\/images\/cats\/#{@name}.jpg\"} modifiers={frame(@native, width: 300, height: 300)} \/>",
        "      <CatRating score={@score} \/>",
        "    <\/VStack>",
        "    \"\"\"swiftui",
        "  end",
        "",
        "  def handle_event(\"change-score\", score, socket) do",
        "    FavoritesStore.set_score(socket.assigns.name, score)",
        "    {:noreply, assign(socket, score: score)}",
        "  end",
        "",
        "  def handle_event(\"toggle-favorite\", _, socket) do",
        "    new = FavoritesStore.toggle_favorite(socket.assigns.name)",
        "    {:noreply, assign(socket, favorite: Enum.member?(new, socket.assigns.name))}",
        "  end",
        "end"
      ],
      "fileName" : "lib\/lvn_tutorial_web\/live\/cat_live.ex",
      "fileType" : "ex",
      "highlights" : [
        {
          "line" : 21
        }
      ],
      "identifier" : "05-01-04-cat_live.ex",
      "syntax" : "elixir",
      "type" : "file"
    },
    "05-02-01-attribute-name.swift" : {
      "content" : [
        "import SwiftUI",
        "import LiveViewNative",
        "",
        "struct MyRegistry: RootRegistry {",
        "    enum TagName: String {",
        "        case catRating = \"CatRating\"",
        "    }",
        "    enum ModifierType: String {",
        "        case navFavorite = \"nav_favorite\"",
        "    }",
        "    ",
        "    static func lookup(_ name: TagName, element: ElementNode) -> some View {",
        "        switch name {",
        "        case .catRating:",
        "            CatRatingView()",
        "        }",
        "    }",
        "}"
      ],
      "fileName" : "MyRegistry.swift",
      "fileType" : "swift",
      "highlights" : [
        {
          "line" : 8
        },
        {
          "line" : 9
        },
        {
          "line" : 10
        }
      ],
      "identifier" : "05-02-01-attribute-name.swift",
      "syntax" : "swift",
      "type" : "file"
    },
    "05-02-02-decode.swift" : {
      "content" : [
        "import SwiftUI",
        "import LiveViewNative",
        "",
        "struct MyRegistry: RootRegistry {",
        "    enum TagName: String {",
        "        case catRating = \"CatRating\"",
        "    }",
        "    enum ModifierType: String {",
        "        case navFavorite = \"nav_favorite\"",
        "    }",
        "    ",
        "    static func lookup(_ name: TagName, element: ElementNode) -> some View {",
        "        switch name {",
        "        case .catRating:",
        "            CatRatingView()",
        "        }",
        "    }",
        "    ",
        "    static func decodeModifier(_ type: ModifierType, from decoder: Decoder) throws -> some ViewModifier {",
        "        switch type {",
        "        case .navFavorite:",
        "            try NavFavoriteModifier(from: decoder)",
        "        }",
        "    }",
        "}"
      ],
      "fileName" : "MyRegistry.swift",
      "fileType" : "swift",
      "highlights" : [
        {
          "line" : 18
        },
        {
          "line" : 19
        },
        {
          "line" : 20
        },
        {
          "line" : 21
        },
        {
          "line" : 22
        },
        {
          "line" : 23
        },
        {
          "line" : 24
        }
      ],
      "identifier" : "05-02-02-decode.swift",
      "syntax" : "swift",
      "type" : "file"
    },
    "05-02-03-empty-modifier.swift" : {
      "content" : [
        "import SwiftUI",
        "import LiveViewNative",
        "",
        "struct NavFavoriteModifier: ViewModifier, Decodable {",
        "    func body(content: Content) -> some View {",
        "    }",
        "}"
      ],
      "fileName" : "NavFavoriteModifier.swift",
      "fileType" : "swift",
      "highlights" : [

      ],
      "identifier" : "05-02-03-empty-modifier.swift",
      "syntax" : "swift",
      "type" : "file"
    },
    "05-02-04-decode-modifier.swift" : {
      "content" : [
        "import SwiftUI",
        "import LiveViewNative",
        "",
        "struct NavFavoriteModifier: ViewModifier, Decodable {",
        "    let isFavorite: Bool",
        "    @LiveContext<MyRegistry> private var context",
        "    ",
        "    init(from decoder: Decoder) throws {",
        "        let container = try decoder.container(keyedBy: CodingKeys.self)",
        "        self.isFavorite = try container.decode(Bool.self, forKey: .isFavorite)",
        "    }",
        "    ",
        "    func body(content: Content) -> some View {",
        "    }",
        "    ",
        "    enum CodingKeys: String, CodingKey {",
        "        case isFavorite",
        "    }",
        "}"
      ],
      "fileName" : "NavFavoriteModifier.swift",
      "fileType" : "swift",
      "highlights" : [
        {
          "line" : 5
        },
        {
          "line" : 6
        },
        {
          "line" : 7
        },
        {
          "line" : 8
        },
        {
          "line" : 9
        },
        {
          "line" : 10
        },
        {
          "line" : 11
        },
        {
          "line" : 12
        },
        {
          "line" : 15
        },
        {
          "line" : 16
        },
        {
          "line" : 17
        },
        {
          "line" : 18
        }
      ],
      "identifier" : "05-02-04-decode-modifier.swift",
      "syntax" : "swift",
      "type" : "file"
    },
    "05-02-05-toolbar.swift" : {
      "content" : [
        "import SwiftUI",
        "import LiveViewNative",
        "",
        "struct NavFavoriteModifier: ViewModifier, Decodable {",
        "    let isFavorite: Bool",
        "    @LiveContext<MyRegistry> private var context",
        "    ",
        "    init(from decoder: Decoder) throws {",
        "        let container = try decoder.container(keyedBy: CodingKeys.self)",
        "        self.isFavorite = try container.decode(Bool.self, forKey: .isFavorite)",
        "    }",
        "    ",
        "    func body(content: Content) -> some View {",
        "        content",
        "            .toolbar {",
        "                ToolbarItem(placement: .navigationBarTrailing) {",
        "                }",
        "            }",
        "    }",
        "    ",
        "    enum CodingKeys: String, CodingKey {",
        "        case isFavorite",
        "    }",
        "}"
      ],
      "fileName" : "NavFavoriteModifier.swift",
      "fileType" : "swift",
      "highlights" : [
        {
          "line" : 14
        },
        {
          "line" : 15
        },
        {
          "line" : 16
        },
        {
          "line" : 17
        },
        {
          "line" : 18
        }
      ],
      "identifier" : "05-02-05-toolbar.swift",
      "syntax" : "swift",
      "type" : "file"
    },
    "05-02-06-button.swift" : {
      "content" : [
        "import SwiftUI",
        "import LiveViewNative",
        "",
        "struct NavFavoriteModifier: ViewModifier, Decodable {",
        "    let isFavorite: Bool",
        "    @LiveContext<MyRegistry> private var context",
        "    ",
        "    init(from decoder: Decoder) throws {",
        "        let container = try decoder.container(keyedBy: CodingKeys.self)",
        "        self.isFavorite = try container.decode(Bool.self, forKey: .isFavorite)",
        "    }",
        "    ",
        "    func body(content: Content) -> some View {",
        "        content",
        "            .toolbar {",
        "                ToolbarItem(placement: .navigationBarTrailing) {",
        "                    Button {",
        "                        Task {",
        "                            try? await context.coordinator.pushEvent(type: \"click\", event: \"toggle-favorite\", value: [String:Any]())",
        "                        }",
        "                    } label: {",
        "                        Image(systemName: isFavorite ? \"star.fill\" : \"star\")",
        "                    }",
        "                }",
        "            }",
        "    }",
        "    ",
        "    enum CodingKeys: String, CodingKey {",
        "        case isFavorite",
        "    }",
        "}"
      ],
      "fileName" : "NavFavoriteModifier.swift",
      "fileType" : "swift",
      "highlights" : [
        {
          "line" : 17
        },
        {
          "line" : 18
        },
        {
          "line" : 19
        },
        {
          "line" : 20
        },
        {
          "line" : 21
        },
        {
          "line" : 22
        },
        {
          "line" : 23
        }
      ],
      "identifier" : "05-02-06-button.swift",
      "syntax" : "swift",
      "type" : "file"
    },
    "05-02-07-modifier-schema.ex" : {
      "content" : [
        "defmodule LvnTutorialWeb.Modifiers.NavFavorite do",
        "  use LiveViewNativePlatform.Modifier",
        "",
        "  modifier_schema \"nav_favorite\" do",
        "    field :is_favorite, :boolean",
        "  end",
        "end"
      ],
      "fileName" : "lib\/lvn_tutorial_web\/modifiers\/nav_favorite.ex",
      "fileType" : "ex",
      "highlights" : [

      ],
      "identifier" : "05-02-07-modifier-schema.ex",
      "syntax" : "elixir",
      "type" : "file"
    },
    "05-02-08-config.exs" : {
      "content" : [
        "# This file is responsible for configuring your application",
        "# and its dependencies with the aid of the Config module.",
        "#",
        "# This configuration file is loaded before any dependency and",
        "# is restricted to this project.",
        "",
        "# General application configuration",
        "import Config",
        "",
        "config :live_view_native, :platforms, [LiveViewNativeSwiftUi.Platform]",
        "",
        "config :live_view_native, LiveViewNativeSwiftUi.Platform,",
        "  app_name: \"LVNTutorial\",",
        "  custom_modifiers: [nav_favorite: LvnTutorialWeb.Modifiers.NavFavorite]",
        "",
        "# Configures the endpoint",
        "config :lvn_tutorial, LvnTutorialWeb.Endpoint,",
        "  url: [host: \"localhost\"],",
        "  render_errors: [",
        "    formats: [html: LvnTutorialWeb.ErrorHTML, json: LvnTutorialWeb.ErrorJSON],",
        "    layout: false",
        "  ],",
        "  pubsub_server: LvnTutorial.PubSub,",
        "  live_view: [signing_salt: \"0p4irQ9b\"]",
        "",
        "# Configure esbuild (the version is required)",
        "config :esbuild,",
        "  version: \"0.17.11\",",
        "  default: [",
        "    args:",
        "      ~w(js\/app.js --bundle --target=es2017 --outdir=..\/priv\/static\/assets --external:\/fonts\/* --external:\/images\/*),",
        "    cd: Path.expand(\"..\/assets\", __DIR__),",
        "    env: %{\"NODE_PATH\" => Path.expand(\"..\/deps\", __DIR__)}",
        "  ]",
        "",
        "# Configure tailwind (the version is required)",
        "config :tailwind,",
        "  version: \"3.2.7\",",
        "  default: [",
        "    args: ~w(",
        "      --config=tailwind.config.js",
        "      --input=css\/app.css",
        "      --output=..\/priv\/static\/assets\/app.css",
        "    ),",
        "    cd: Path.expand(\"..\/assets\", __DIR__)",
        "  ]",
        "",
        "# Configures Elixir's Logger",
        "config :logger, :console,",
        "  format: \"$time $metadata[$level] $message\\n\",",
        "  metadata: [:request_id]",
        "",
        "# Use Jason for JSON parsing in Phoenix",
        "config :phoenix, :json_library, Jason",
        "",
        "# Import environment specific config. This must remain at the bottom",
        "# of this file so it overrides the configuration defined above.",
        "import_config \"#{config_env()}.exs\""
      ],
      "fileName" : "config\/config.exs",
      "fileType" : "exs",
      "highlights" : [
        {
          "line" : 14
        }
      ],
      "identifier" : "05-02-08-config.exs",
      "syntax" : "exs",
      "type" : "file"
    },
    "05-02-09-preview.mp4" : {
      "alt" : null,
      "identifier" : "05-02-09-preview.mp4",
      "poster" : null,
      "type" : "video",
      "variants" : [
        {
          "traits" : [
            "1x",
            "light"
          ],
          "url" : "\/videos\/05-02-09-preview.mp4"
        }
      ]
    },
    "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/01-Initial-List" : {
      "abstract" : [
        {
          "text" : "In this tutorial, you’ll build a simple LiveView app to show a list of cute cats.",
          "type" : "text"
        }
      ],
      "estimatedTime" : "30min",
      "identifier" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/01-Initial-List",
      "kind" : "project",
      "role" : "project",
      "title" : "Your First LiveView",
      "type" : "topic",
      "url" : "\/tutorials\/liveviewnative\/01-initial-list"
    },
    "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/01-Initial-List#Build-the-List-UI" : {
      "abstract" : [
        {
          "text" : "In this tutorial, you’ll build a simple LiveView app to show a list of cute cats.",
          "type" : "text"
        }
      ],
      "identifier" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/01-Initial-List#Build-the-List-UI",
      "kind" : "section",
      "role" : "pseudoSymbol",
      "title" : "Build the List UI",
      "type" : "section",
      "url" : "\/tutorials\/liveviewnative\/01-initial-list#Build-the-List-UI"
    },
    "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/01-Initial-List#Building-the-Backend" : {
      "abstract" : [
        {
          "text" : "In this tutorial, you’ll build a simple LiveView app to show a list of cute cats.",
          "type" : "text"
        }
      ],
      "identifier" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/01-Initial-List#Building-the-Backend",
      "kind" : "section",
      "role" : "pseudoSymbol",
      "title" : "Building the Backend",
      "type" : "section",
      "url" : "\/tutorials\/liveviewnative\/01-initial-list#Building-the-Backend"
    },
    "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/01-Initial-List#Creating-the-App" : {
      "abstract" : [
        {
          "text" : "In this tutorial, you’ll build a simple LiveView app to show a list of cute cats.",
          "type" : "text"
        }
      ],
      "identifier" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/01-Initial-List#Creating-the-App",
      "kind" : "section",
      "role" : "pseudoSymbol",
      "title" : "Creating the App",
      "type" : "section",
      "url" : "\/tutorials\/liveviewnative\/01-initial-list#Creating-the-App"
    },
    "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/02-Favorite-Button" : {
      "abstract" : [
        {
          "text" : "Now that you’ve built a simple app to display a list, let’s add a bit of interactivity. To each list row, we’ll add a favorite button that can be used to pin cats to the top of the list.",
          "type" : "text"
        }
      ],
      "estimatedTime" : "30min",
      "identifier" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/02-Favorite-Button",
      "kind" : "project",
      "role" : "project",
      "title" : "Storing User Favorites",
      "type" : "topic",
      "url" : "\/tutorials\/liveviewnative\/02-favorite-button"
    },
    "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/02-Favorite-Button#Adding-the-Favorite-Button" : {
      "abstract" : [
        {
          "text" : "Now that you’ve built a simple app to display a list, let’s add a bit of interactivity. To each list row, we’ll add a favorite button that can be used to pin cats to the top of the list.",
          "type" : "text"
        }
      ],
      "identifier" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/02-Favorite-Button#Adding-the-Favorite-Button",
      "kind" : "section",
      "role" : "pseudoSymbol",
      "title" : "Adding the Favorite Button",
      "type" : "section",
      "url" : "\/tutorials\/liveviewnative\/02-favorite-button#Adding-the-Favorite-Button"
    },
    "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/02-Favorite-Button#Updating-the-Backend" : {
      "abstract" : [
        {
          "text" : "Now that you’ve built a simple app to display a list, let’s add a bit of interactivity. To each list row, we’ll add a favorite button that can be used to pin cats to the top of the list.",
          "type" : "text"
        }
      ],
      "identifier" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/02-Favorite-Button#Updating-the-Backend",
      "kind" : "section",
      "role" : "pseudoSymbol",
      "title" : "Updating the Backend",
      "type" : "section",
      "url" : "\/tutorials\/liveviewnative\/02-favorite-button#Updating-the-Backend"
    },
    "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/03-Navigation-and-Hero" : {
      "abstract" : [
        {
          "text" : "The list of cats is great, but the images are a little small. Let’s add a detail view so we can see them nice and big!",
          "type" : "text"
        }
      ],
      "estimatedTime" : "30min",
      "identifier" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/03-Navigation-and-Hero",
      "kind" : "project",
      "role" : "project",
      "title" : "Navigation and Detail View",
      "type" : "topic",
      "url" : "\/tutorials\/liveviewnative\/03-navigation-and-hero"
    },
    "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/03-Navigation-and-Hero#Adding-Navigation" : {
      "abstract" : [
        {
          "text" : "The list of cats is great, but the images are a little small. Let’s add a detail view so we can see them nice and big!",
          "type" : "text"
        }
      ],
      "identifier" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/03-Navigation-and-Hero#Adding-Navigation",
      "kind" : "section",
      "role" : "pseudoSymbol",
      "title" : "Adding Navigation",
      "type" : "section",
      "url" : "\/tutorials\/liveviewnative\/03-navigation-and-hero#Adding-Navigation"
    },
    "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/03-Navigation-and-Hero#Building-the-Detail-View" : {
      "abstract" : [
        {
          "text" : "The list of cats is great, but the images are a little small. Let’s add a detail view so we can see them nice and big!",
          "type" : "text"
        }
      ],
      "identifier" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/03-Navigation-and-Hero#Building-the-Detail-View",
      "kind" : "section",
      "role" : "pseudoSymbol",
      "title" : "Building the Detail View",
      "type" : "section",
      "url" : "\/tutorials\/liveviewnative\/03-navigation-and-hero#Building-the-Detail-View"
    },
    "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/04-Custom-Element" : {
      "abstract" : [
        {
          "text" : "Let’s add a custom control that allows users to assign specific star ratings to cats in our app.",
          "type" : "text"
        }
      ],
      "estimatedTime" : "30min",
      "identifier" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/04-Custom-Element",
      "kind" : "project",
      "role" : "project",
      "title" : "Add a Custom HTML Element",
      "type" : "topic",
      "url" : "\/tutorials\/liveviewnative\/04-custom-element"
    },
    "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/04-Custom-Element#Building-the-View" : {
      "abstract" : [
        {
          "text" : "Let’s add a custom control that allows users to assign specific star ratings to cats in our app.",
          "type" : "text"
        }
      ],
      "identifier" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/04-Custom-Element#Building-the-View",
      "kind" : "section",
      "role" : "pseudoSymbol",
      "title" : "Building the View",
      "type" : "section",
      "url" : "\/tutorials\/liveviewnative\/04-custom-element#Building-the-View"
    },
    "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/04-Custom-Element#Setting-Up-the-Registry" : {
      "abstract" : [
        {
          "text" : "Let’s add a custom control that allows users to assign specific star ratings to cats in our app.",
          "type" : "text"
        }
      ],
      "identifier" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/04-Custom-Element#Setting-Up-the-Registry",
      "kind" : "section",
      "role" : "pseudoSymbol",
      "title" : "Setting Up the Registry",
      "type" : "section",
      "url" : "\/tutorials\/liveviewnative\/04-custom-element#Setting-Up-the-Registry"
    },
    "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/04-Custom-Element#Update-the-GenServer" : {
      "abstract" : [
        {
          "text" : "Let’s add a custom control that allows users to assign specific star ratings to cats in our app.",
          "type" : "text"
        }
      ],
      "identifier" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/04-Custom-Element#Update-the-GenServer",
      "kind" : "section",
      "role" : "pseudoSymbol",
      "title" : "Update the GenServer",
      "type" : "section",
      "url" : "\/tutorials\/liveviewnative\/04-custom-element#Update-the-GenServer"
    },
    "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/04-Custom-Element#Using-the-Element" : {
      "abstract" : [
        {
          "text" : "Let’s add a custom control that allows users to assign specific star ratings to cats in our app.",
          "type" : "text"
        }
      ],
      "identifier" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/04-Custom-Element#Using-the-Element",
      "kind" : "section",
      "role" : "pseudoSymbol",
      "title" : "Using the Element",
      "type" : "section",
      "url" : "\/tutorials\/liveviewnative\/04-custom-element#Using-the-Element"
    },
    "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/05-Custom-Modifier" : {
      "abstract" : [
        {
          "text" : "Use a custom modifier to add a navigation bar button to the detail view.",
          "type" : "text"
        }
      ],
      "estimatedTime" : "30min",
      "identifier" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/05-Custom-Modifier",
      "kind" : "project",
      "role" : "project",
      "title" : "Add a Navigation Bar Button with a Custom Modifier",
      "type" : "topic",
      "url" : "\/tutorials\/liveviewnative\/05-custom-modifier"
    },
    "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/05-Custom-Modifier#Implement-the-Attribute" : {
      "abstract" : [
        {
          "text" : "Use a custom modifier to add a navigation bar button to the detail view.",
          "type" : "text"
        }
      ],
      "identifier" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/05-Custom-Modifier#Implement-the-Attribute",
      "kind" : "section",
      "role" : "pseudoSymbol",
      "title" : "Implement the Attribute",
      "type" : "section",
      "url" : "\/tutorials\/liveviewnative\/05-custom-modifier#Implement-the-Attribute"
    },
    "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/05-Custom-Modifier#Update-the-Backend" : {
      "abstract" : [
        {
          "text" : "Use a custom modifier to add a navigation bar button to the detail view.",
          "type" : "text"
        }
      ],
      "identifier" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/05-Custom-Modifier#Update-the-Backend",
      "kind" : "section",
      "role" : "pseudoSymbol",
      "title" : "Update the Backend",
      "type" : "section",
      "url" : "\/tutorials\/liveviewnative\/05-custom-modifier#Update-the-Backend"
    },
    "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/06-Custom-Loading-Screen" : {
      "abstract" : [
        {
          "text" : "Add a more interesting loading screen that matches the style of your app.",
          "type" : "text"
        }
      ],
      "estimatedTime" : "30min",
      "identifier" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/06-Custom-Loading-Screen",
      "kind" : "project",
      "role" : "project",
      "title" : "Style the Loading Screen to Match Your App",
      "type" : "topic",
      "url" : "\/tutorials\/liveviewnative\/06-custom-loading-screen"
    },
    "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/06-Custom-Loading-Screen#Add-the-Loading-View" : {
      "abstract" : [
        {
          "text" : "Add a more interesting loading screen that matches the style of your app.",
          "type" : "text"
        }
      ],
      "identifier" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/06-Custom-Loading-Screen#Add-the-Loading-View",
      "kind" : "section",
      "role" : "pseudoSymbol",
      "title" : "Add the Loading View",
      "type" : "section",
      "url" : "\/tutorials\/liveviewnative\/06-custom-loading-screen#Add-the-Loading-View"
    },
    "doc:\/\/LiveViewNative\/tutorials\/YourFirstApp" : {
      "abstract" : [
        {
          "text" : "A step-by-step guide to building your first app with LiveViewNative. Learn how to display data, handle navigation, build interactions, and more.",
          "type" : "text"
        }
      ],
      "identifier" : "doc:\/\/LiveViewNative\/tutorials\/YourFirstApp",
      "kind" : "overview",
      "role" : "overview",
      "title" : "Your First LiveViewNative App",
      "type" : "topic",
      "url" : "\/tutorials\/yourfirstapp"
    },
    "doc:\/\/LiveViewNative\/tutorials\/YourFirstApp\/Customize-with-Swift" : {
      "abstract" : [

      ],
      "identifier" : "doc:\/\/LiveViewNative\/tutorials\/YourFirstApp\/Customize-with-Swift",
      "kind" : "article",
      "role" : "article",
      "title" : "Customize with Swift",
      "type" : "topic",
      "url" : "\/tutorials\/yourfirstapp\/customize-with-swift"
    },
    "doc:\/\/LiveViewNative\/tutorials\/YourFirstApp\/Getting-Started" : {
      "abstract" : [

      ],
      "identifier" : "doc:\/\/LiveViewNative\/tutorials\/YourFirstApp\/Getting-Started",
      "kind" : "article",
      "role" : "article",
      "title" : "Getting Started",
      "type" : "topic",
      "url" : "\/tutorials\/yourfirstapp\/getting-started"
    },
    "Xcode 13.3" : {
      "identifier" : "Xcode 13.3",
      "title" : "Xcode 13.3",
      "type" : "xcodeRequirement",
      "url" : "https:\/\/developer.apple.com\/download\/applications\/"
    }
  },
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [
    {
      "backgroundImage" : "05-00-intro-header.png",
      "chapter" : "Customize with Swift",
      "content" : [
        {
          "inlineContent" : [
            {
              "text" : "Use a custom modifier to add a navigation bar button to the detail view.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "estimatedTimeInMinutes" : 30,
      "image" : "05-00-intro-header.png",
      "kind" : "hero",
      "title" : "Add a Navigation Bar Button with a Custom Modifier",
      "xcodeRequirement" : "Xcode 13.3"
    },
    {
      "kind" : "tasks",
      "tasks" : [
        {
          "anchor" : "Update-the-Backend",
          "contentSection" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Update the backend live view to allow it to display and change the favorite state.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              "kind" : "fullWidth"
            }
          ],
          "stepsSection" : [
            {
              "caption" : [

              ],
              "code" : "04-04-03-cat_live.ex",
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Open the ",
                      "type" : "text"
                    },
                    {
                      "code" : "cat_live.ex",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " file.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              "media" : null,
              "runtimePreview" : null,
              "type" : "step"
            },
            {
              "caption" : [

              ],
              "code" : "05-01-02-cat_live.ex",
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Update the ",
                      "type" : "text"
                    },
                    {
                      "code" : "mount",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " callback to add an assign for whether the cat has been favorited or not.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              "media" : null,
              "runtimePreview" : null,
              "type" : "step"
            },
            {
              "caption" : [

              ],
              "code" : "05-01-03-cat_live.ex",
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Then, add another event handler that the frontend will trigger to update the favorite state.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              "media" : null,
              "runtimePreview" : null,
              "type" : "step"
            },
            {
              "caption" : [

              ],
              "code" : "05-01-04-cat_live.ex",
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Add the custom modifier ",
                      "type" : "text"
                    },
                    {
                      "code" : "nav_favorite",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " to the ",
                      "type" : "text"
                    },
                    {
                      "code" : "<VStack>",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ". With the modifier we’ll pass the current state, so the frontend can display it in the navigation bar button.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              "media" : null,
              "runtimePreview" : null,
              "type" : "step"
            }
          ],
          "title" : "Update the Backend"
        },
        {
          "anchor" : "Implement-the-Attribute",
          "contentSection" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Add code for handling the ",
                      "type" : "text"
                    },
                    {
                      "code" : "nav_favorite",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " modifier to your custom registry.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              "kind" : "fullWidth"
            }
          ],
          "stepsSection" : [
            {
              "caption" : [

              ],
              "code" : "04-01-03-view.swift",
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Edit your custom registry implementation.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              "media" : null,
              "runtimePreview" : null,
              "type" : "step"
            },
            {
              "caption" : [

              ],
              "code" : "05-02-01-attribute-name.swift",
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Replace the ",
                      "type" : "text"
                    },
                    {
                      "code" : "ModifierType",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " type alias with a new enum of the same name. This enum, similar to the ",
                      "type" : "text"
                    },
                    {
                      "code" : "TagName",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " one, defines the modifiers that your registry supports.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              "media" : null,
              "runtimePreview" : null,
              "type" : "step"
            },
            {
              "caption" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "In the method, we’ll switch over the type, and if it’s the ",
                      "type" : "text"
                    },
                    {
                      "code" : "nav_favorite",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " modifier, decode a ",
                      "type" : "text"
                    },
                    {
                      "code" : "NavFavoriteModifier",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ". As with the ",
                      "type" : "text"
                    },
                    {
                      "code" : "lookup",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " method, don’t include a default branch so that the compiler ensures your switch is exhaustive.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              "code" : "05-02-02-decode.swift",
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Implement the ",
                      "type" : "text"
                    },
                    {
                      "code" : "decodeModifier",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " method. This method is invoked by the framework whenever it encounters an attribute that your registry has declared support for.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              "media" : null,
              "runtimePreview" : null,
              "type" : "step"
            },
            {
              "caption" : [

              ],
              "code" : "05-02-03-empty-modifier.swift",
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Create a struct called ",
                      "type" : "text"
                    },
                    {
                      "code" : "NavFavoriteModifier",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " that implements the ",
                      "type" : "text"
                    },
                    {
                      "code" : "ViewModifier",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " protocol.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              "media" : null,
              "runtimePreview" : null,
              "type" : "step"
            },
            {
              "caption" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "isFavorite",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " will be used to show the current state of the favorite button, and the context will let us access the coordinator so we can send an event when the button’s tapped.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              "code" : "05-02-04-decode-modifier.swift",
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Add the ",
                      "type" : "text"
                    },
                    {
                      "code" : "isFavorite",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " and ",
                      "type" : "text"
                    },
                    {
                      "code" : "context",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " properties to the modifier struct.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              "media" : null,
              "runtimePreview" : null,
              "type" : "step"
            },
            {
              "caption" : [

              ],
              "code" : "05-02-05-toolbar.swift",
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "In the body method, we’ll take the content and add to it a toolbar item placed in the trailing position of the navigation bar.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              "media" : null,
              "runtimePreview" : null,
              "type" : "step"
            },
            {
              "caption" : [

              ],
              "code" : "05-02-06-button.swift",
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "The button inside the toolbar item will display a filled or unfilled star, depending on the current state. When the button is tapped, it will trigger the ",
                      "type" : "text"
                    },
                    {
                      "code" : "toggle-favorite",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " we set up before on the backend. We pass an empty dictionary as the value for the event, since there’s no other data we need to send.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              "media" : null,
              "runtimePreview" : null,
              "type" : "step"
            },
            {
              "caption" : [

              ],
              "code" : "05-02-07-modifier-schema.ex",
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Now we need to setup the modifier in Elixir.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "Create a new file called ",
                      "type" : "text"
                    },
                    {
                      "code" : "nav_favorite.ex",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " and write the modifier schema.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              "media" : null,
              "runtimePreview" : null,
              "type" : "step"
            },
            {
              "caption" : [

              ],
              "code" : "01-01-05-config.exs",
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Edit your config.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              "media" : null,
              "runtimePreview" : null,
              "type" : "step"
            },
            {
              "caption" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "With that, you can re-run the app and observe the new modifier in action!",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              "code" : "05-02-08-config.exs",
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Next, add the modifier module to the list of ",
                      "type" : "text"
                    },
                    {
                      "code" : "custom_modifiers",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " in ",
                      "type" : "text"
                    },
                    {
                      "code" : "config.exs",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              "media" : null,
              "runtimePreview" : "05-02-09-preview.mp4",
              "type" : "step"
            }
          ],
          "title" : "Implement the Attribute"
        }
      ]
    },
    {
      "abstract" : [
        {
          "text" : "Add a more interesting loading screen that matches the style of your app.",
          "type" : "text"
        }
      ],
      "action" : {
        "identifier" : "doc:\/\/LiveViewNative\/tutorials\/LiveViewNative\/06-Custom-Loading-Screen",
        "isActive" : true,
        "overridingTitle" : "Get started",
        "overridingTitleInlineContent" : [
          {
            "text" : "Get started",
            "type" : "text"
          }
        ],
        "type" : "reference"
      },
      "featuredEyebrow" : "Tutorial",
      "kind" : "callToAction",
      "title" : "Style the Loading Screen to Match Your App"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/tutorials\/liveviewnative\/05-custom-modifier"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
}