{
  "hierarchy": {
    "modules": [
      {
        "projects": [
          {
            "reference": "doc://LiveViewNative/tutorials/LiveViewNative/01-Initial-List",
            "sections": [
              {
                "kind": "task",
                "reference": "doc://LiveViewNative/tutorials/LiveViewNative/01-Initial-List#Building-the-Backend"
              },
              {
                "kind": "task",
                "reference": "doc://LiveViewNative/tutorials/LiveViewNative/01-Initial-List#Creating-the-App"
              },
              {
                "kind": "task",
                "reference": "doc://LiveViewNative/tutorials/LiveViewNative/01-Initial-List#Build-the-List-UI"
              }
            ]
          },
          {
            "reference": "doc://LiveViewNative/tutorials/LiveViewNative/02-Favorite-Button",
            "sections": [
              {
                "kind": "task",
                "reference": "doc://LiveViewNative/tutorials/LiveViewNative/02-Favorite-Button#Updating-the-Backend"
              },
              {
                "kind": "task",
                "reference": "doc://LiveViewNative/tutorials/LiveViewNative/02-Favorite-Button#Adding-the-Favorite-Button"
              }
            ]
          },
          {
            "reference": "doc://LiveViewNative/tutorials/LiveViewNative/03-Navigation-and-Hero",
            "sections": [
              {
                "kind": "task",
                "reference": "doc://LiveViewNative/tutorials/LiveViewNative/03-Navigation-and-Hero#Building-the-Detail-View"
              },
              {
                "kind": "task",
                "reference": "doc://LiveViewNative/tutorials/LiveViewNative/03-Navigation-and-Hero#Adding-Navigation"
              }
            ]
          }
        ],
        "reference": "doc://LiveViewNative/tutorials/YourFirstApp/Getting-Started"
      },
      {
        "projects": [
          {
            "reference": "doc://LiveViewNative/tutorials/LiveViewNative/04-Custom-Element",
            "sections": [
              {
                "kind": "task",
                "reference": "doc://LiveViewNative/tutorials/LiveViewNative/04-Custom-Element#Setting-Up-the-Registry"
              },
              {
                "kind": "task",
                "reference": "doc://LiveViewNative/tutorials/LiveViewNative/04-Custom-Element#Update-the-GenServer"
              },
              {
                "kind": "task",
                "reference": "doc://LiveViewNative/tutorials/LiveViewNative/04-Custom-Element#Building-the-View"
              },
              {
                "kind": "task",
                "reference": "doc://LiveViewNative/tutorials/LiveViewNative/04-Custom-Element#Using-the-Element"
              }
            ]
          },
          {
            "reference": "doc://LiveViewNative/tutorials/LiveViewNative/05-Custom-Modifier",
            "sections": [
              {
                "kind": "task",
                "reference": "doc://LiveViewNative/tutorials/LiveViewNative/05-Custom-Modifier#Update-the-Backend"
              },
              {
                "kind": "task",
                "reference": "doc://LiveViewNative/tutorials/LiveViewNative/05-Custom-Modifier#Implement-the-Attribute"
              }
            ]
          },
          {
            "reference": "doc://LiveViewNative/tutorials/LiveViewNative/06-Custom-Loading-Screen",
            "sections": [
              {
                "kind": "task",
                "reference": "doc://LiveViewNative/tutorials/LiveViewNative/06-Custom-Loading-Screen#Add-the-Loading-View"
              }
            ]
          }
        ],
        "reference": "doc://LiveViewNative/tutorials/YourFirstApp/Customize-with-Swift"
      }
    ],
    "paths": [
      [
        "doc://LiveViewNative/tutorials/YourFirstApp",
        "doc://LiveViewNative/tutorials/YourFirstApp/$volume",
        "doc://LiveViewNative/tutorials/YourFirstApp/Customize-with-Swift"
      ]
    ],
    "reference": "doc://LiveViewNative/tutorials/YourFirstApp"
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://LiveViewNative/tutorials/LiveViewNative/04-Custom-Element"
  },
  "kind": "project",
  "metadata": {
    "category": "Live View Native",
    "categoryPathComponent": "YourFirstApp",
    "role": "project",
    "title": "Add a Custom HTML Element"
  },
  "references": {
    "02-01-01-genserver.ex": {
      "content": [
        "defmodule LvnTutorial.FavoritesStore do",
        "  use GenServer",
        "",
        "  # Client",
        "",
        "  def start_link(_) do",
        "    GenServer.start_link(__MODULE__, nil, name: __MODULE__)",
        "  end",
        "",
        "  def get_favorites() do",
        "    GenServer.call(__MODULE__, :get_favorites)",
        "  end",
        "",
        "  def toggle_favorite(name) do",
        "    GenServer.call(__MODULE__, {:toggle_favorite, name})",
        "  end",
        "",
        "  # Server",
        "",
        "  @impl true",
        "  def init(_) do",
        "    {:ok, []}",
        "  end",
        "",
        "  @impl true",
        "  def handle_call(:get_favorites, _from, favorites) do",
        "    {:reply, favorites, favorites}",
        "  end",
        "",
        "  @impl true",
        "  def handle_call({:toggle_favorite, name}, _from, favorites) do",
        "    new =",
        "      if Enum.member?(favorites, name) do",
        "        List.delete(favorites, name)",
        "      else",
        "        [name | favorites]",
        "      end",
        "",
        "    {:reply, new, new}",
        "  end",
        "end"
      ],
      "fileName": "lib/lvn_tutorial/favorites_store.ex",
      "fileType": "ex",
      "highlights": [],
      "identifier": "02-01-01-genserver.ex",
      "syntax": "ex",
      "type": "file"
    },
    "03-01-02-cat_live.ex": {
      "content": [
        "defmodule LvnTutorialWeb.CatLive do",
        "  use LvnTutorialWeb, :live_view",
        "  require EEx",
        "",
        "  EEx.function_from_file(",
        "    :def,",
        "    :render,",
        "    \"lib/lvn_tutorial_web/live/cat_live.ios.heex\",",
        "    [:assigns],",
        "    engine: Phoenix.LiveView.HTMLEngine",
        "  )",
        "",
        "  def mount(%{\"name\" => name}, _session, socket) do",
        "    {:ok, assign(socket, name: name)}",
        "  end",
        "end"
      ],
      "fileName": "lib/lvn_tutorial_web/live/cat_live.ex",
      "fileType": "ex",
      "highlights": [],
      "identifier": "03-01-02-cat_live.ex",
      "syntax": "ex",
      "type": "file"
    },
    "03-01-03-cat_live.ios.heex": {
      "content": [
        "<vstack modifiers={[%{\"type\" => \"navigation_title\", \"title\" => @name}] |> Jason.encode!}>",
        "  <asyncimage src={\"/images/cats/#{@name}.jpg\"} modifiers='[{\"type\": \"frame\", \"width\": 300, \"height\": 300}]' />",
        "</vstack>"
      ],
      "fileName": "lib/lvn_tutorial_web/live/cat_live.ios.heex",
      "fileType": "heex",
      "highlights": [],
      "identifier": "03-01-03-cat_live.ios.heex",
      "syntax": "heex",
      "type": "file"
    },
    "03-02-01-navigationmode.swift": {
      "content": [
        "import SwiftUI",
        "import LiveViewNative",
        "",
        "@MainActor",
        "struct ContentView: View {",
        "    @State var coordinator: LiveViewCoordinator<EmptyRegistry> = {",
        "        var config = LiveViewConfiguration()",
        "        config.navigationMode = .enabled",
        "        return LiveViewCoordinator(URL(string: \"http://localhost:4000/cats\")!, config: config)",
        "    }()",
        "",
        "    var body: some View {",
        "        LiveView(coordinator: coordinator)",
        "    }",
        "}"
      ],
      "fileName": "ContentView.swift",
      "fileType": "swift",
      "highlights": [],
      "identifier": "03-02-01-navigationmode.swift",
      "syntax": "swift",
      "type": "file"
    },
    "04-00-intro-header.png": {
      "alt": "Five red hearts below an image of a cat.",
      "identifier": "04-00-intro-header.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "1x",
            "light"
          ],
          "url": "/images/04-00-intro-header.png"
        }
      ]
    },
    "04-01-01-registry.swift": {
      "content": [
        "import SwiftUI",
        "import LiveViewNative",
        "",
        "struct MyRegistry: CustomRegistry {",
        "}"
      ],
      "fileName": "MyRegistry.swift",
      "fileType": "swift",
      "highlights": [],
      "identifier": "04-01-01-registry.swift",
      "syntax": "swift",
      "type": "file"
    },
    "04-01-02-tag.swift": {
      "content": [
        "import SwiftUI",
        "import LiveViewNative",
        "",
        "struct MyRegistry: CustomRegistry {",
        "    enum TagName: String {",
        "        case catRating = \"cat-rating\"",
        "    }",
        "    ",
        "    static func lookup(_ name: TagName, element: ElementNode, context: LiveContext<MyRegistry>) -> some View {",
        "        switch name {",
        "        case .catRating:",
        "            // TODO",
        "        }",
        "    }",
        "}"
      ],
      "fileName": "MyRegistry.swift",
      "fileType": "swift",
      "highlights": [
        {
          "line": 5
        },
        {
          "line": 6
        },
        {
          "line": 7
        },
        {
          "line": 8
        },
        {
          "line": 9
        },
        {
          "line": 10
        },
        {
          "line": 11
        },
        {
          "line": 12
        },
        {
          "line": 13
        },
        {
          "line": 14
        }
      ],
      "identifier": "04-01-02-tag.swift",
      "syntax": "swift",
      "type": "file"
    },
    "04-01-03-modifier.swift": {
      "content": [
        "import SwiftUI",
        "import LiveViewNative",
        "",
        "struct MyRegistry: CustomRegistry {",
        "    enum TagName: String {",
        "        case catRating = \"cat-rating\"",
        "    }",
        "    typealias ModifierType = EmptyRegistry.None",
        "    ",
        "    static func lookup(_ name: TagName, element: ElementNode, context: LiveContext<MyRegistry>) -> some View {",
        "        switch name {",
        "        case .catRating:",
        "            // TODO",
        "        }",
        "    }",
        "}"
      ],
      "fileName": "MyRegistry.swift",
      "fileType": "swift",
      "highlights": [
        {
          "line": 8
        }
      ],
      "identifier": "04-01-03-modifier.swift",
      "syntax": "swift",
      "type": "file"
    },
    "04-01-04-view.swift": {
      "content": [
        "import SwiftUI",
        "import LiveViewNative",
        "",
        "struct MyRegistry: CustomRegistry {",
        "    enum TagName: String {",
        "        case catRating = \"cat-rating\"",
        "    }",
        "    typealias ModifierType = EmptyRegistry.None",
        "    ",
        "    static func lookup(_ name: TagName, element: ElementNode, context: LiveContext<MyRegistry>) -> some View {",
        "        switch name {",
        "        case .catRating:",
        "            CatRatingView(context: context)",
        "        }",
        "    }",
        "}"
      ],
      "fileName": "MyRegistry.swift",
      "fileType": "swift",
      "highlights": [
        {
          "line": 13
        }
      ],
      "identifier": "04-01-04-view.swift",
      "syntax": "swift",
      "type": "file"
    },
    "04-01-05-coordinator.swift": {
      "content": [
        "import SwiftUI",
        "import LiveViewNative",
        "",
        "@MainActor",
        "struct ContentView: View {",
        "    @State var coordinator: LiveViewCoordinator<MyRegistry> = {",
        "        var config = LiveViewConfiguration()",
        "        config.navigationMode = .enabled",
        "        return LiveViewCoordinator(URL(string: \"http://localhost:4000/cats\")!, config: config)",
        "    }()",
        "",
        "    var body: some View {",
        "        LiveView(coordinator: coordinator)",
        "    }",
        "}"
      ],
      "fileName": "ContentView.swift",
      "fileType": "swift",
      "highlights": [
        {
          "line": 6
        }
      ],
      "identifier": "04-01-05-coordinator.swift",
      "syntax": "swift",
      "type": "file"
    },
    "04-02-01-genserver.ex": {
      "content": [
        "defmodule LvnTutorial.FavoritesStore do",
        "  use GenServer",
        "",
        "  # Client",
        "",
        "  def start_link(_) do",
        "    GenServer.start_link(__MODULE__, nil, name: __MODULE__)",
        "  end",
        "",
        "  def get_favorites() do",
        "    GenServer.call(__MODULE__, :get_favorites)",
        "  end",
        "",
        "  def toggle_favorite(name) do",
        "    GenServer.call(__MODULE__, {:toggle_favorite, name})",
        "  end",
        "",
        "  def get_score(name) do",
        "    GenServer.call(__MODULE__, {:get_score, name})",
        "  end",
        "",
        "  def set_score(name, score) do",
        "    GenServer.call(__MODULE__, {:set_score, name, score})",
        "  end",
        "",
        "  # Server",
        "",
        "  @impl true",
        "  def init(_) do",
        "    {:ok, {[], %{}}}",
        "  end",
        "",
        "  @impl true",
        "  def handle_call(:get_favorites, _from, {favorites, _} = state) do",
        "    {:reply, favorites, state}",
        "  end",
        "",
        "  @impl true",
        "  def handle_call({:toggle_favorite, name}, _from, {favorites, scores}) do",
        "    new =",
        "      if Enum.member?(favorites, name) do",
        "        List.delete(favorites, name)",
        "      else",
        "        [name | favorites]",
        "      end",
        "",
        "    {:reply, new, {new, scores}}",
        "  end",
        "",
        "  @impl true",
        "  def handle_call({:get_score, name}, _from, {_, scores} = state) do",
        "    {:reply, Map.get(scores, name, 0), state}",
        "  end",
        "",
        "  @impl true",
        "  def handle_call({:set_score, name, score}, _from, {favorites, scores}) do",
        "    new = Map.put(scores, name, score)",
        "    {:reply, new, {favorites, new}}",
        "  end",
        "end"
      ],
      "fileName": "lib/lvn_tutorial/favorites_store.ex",
      "fileType": "ex",
      "highlights": [
        {
          "line": 18
        },
        {
          "line": 19
        },
        {
          "line": 20
        },
        {
          "line": 21
        },
        {
          "line": 22
        },
        {
          "line": 23
        },
        {
          "line": 24
        },
        {
          "line": 25
        },
        {
          "line": 30
        },
        {
          "line": 34
        },
        {
          "line": 35
        },
        {
          "line": 39
        },
        {
          "line": 47
        },
        {
          "line": 49
        },
        {
          "line": 50
        },
        {
          "line": 51
        },
        {
          "line": 52
        },
        {
          "line": 53
        },
        {
          "line": 54
        },
        {
          "line": 55
        },
        {
          "line": 56
        },
        {
          "line": 57
        },
        {
          "line": 58
        },
        {
          "line": 59
        }
      ],
      "identifier": "04-02-01-genserver.ex",
      "syntax": "ex",
      "type": "file"
    },
    "04-03-01-empty-view.swift": {
      "content": [
        "import SwiftUI",
        "import LiveViewNative",
        "",
        "struct CatRatingView: View {",
        "    var body: some View {",
        "    }",
        "}"
      ],
      "fileName": "CatRatingView.swift",
      "fileType": "swift",
      "highlights": [],
      "identifier": "04-03-01-empty-view.swift",
      "syntax": "swift",
      "type": "file"
    },
    "04-03-02-initializer.swift": {
      "content": [
        "import SwiftUI",
        "import LiveViewNative",
        "",
        "struct CatRatingView: View {",
        "    @ObservedElement var element: ElementNode",
        "    let context: LiveContext<MyRegistry>",
        "    ",
        "    var score: Int {",
        "        if let str = element.attributeValue(for: \"score\"),",
        "           let score = Int(str) {",
        "            return score",
        "        } else {",
        "            return 0",
        "        }",
        "    }",
        "    ",
        "    var body: some View {",
        "    }",
        "}"
      ],
      "fileName": "CatRatingView.swift",
      "fileType": "swift",
      "highlights": [
        {
          "line": 5
        },
        {
          "line": 6
        },
        {
          "line": 7
        },
        {
          "line": 8
        },
        {
          "line": 9
        },
        {
          "line": 10
        },
        {
          "line": 11
        },
        {
          "line": 12
        },
        {
          "line": 13
        },
        {
          "line": 14
        },
        {
          "line": 15
        },
        {
          "line": 16
        }
      ],
      "identifier": "04-03-02-initializer.swift",
      "syntax": "swift",
      "type": "file"
    },
    "04-03-03-properties.swift": {
      "content": [
        "import SwiftUI",
        "import LiveViewNative",
        "",
        "struct CatRatingView: View {",
        "    @ObservedElement var element: ElementNode",
        "    let context: LiveContext<MyRegistry>",
        "    @State var editedScore: Int?",
        "    @State var width: CGFloat = 0",
        "    ",
        "    var score: Int {",
        "        if let str = element.attributeValue(for: \"score\"),",
        "           let score = Int(str) {",
        "            return score",
        "        } else {",
        "            return 0",
        "        }",
        "    }",
        "    ",
        "    var effectiveScore: Int {",
        "        editedScore ?? score",
        "    }",
        "",
        "    var body: some View {",
        "    }",
        "}"
      ],
      "fileName": "CatRatingView.swift",
      "fileType": "swift",
      "highlights": [
        {
          "line": 7
        },
        {
          "line": 8
        },
        {
          "line": 19
        },
        {
          "line": 20
        },
        {
          "line": 21
        },
        {
          "line": 22
        }
      ],
      "identifier": "04-03-03-properties.swift",
      "syntax": "swift",
      "type": "file"
    },
    "04-03-04-hearts.swift": {
      "content": [
        "import SwiftUI",
        "import LiveViewNative",
        "",
        "struct CatRatingView: View {",
        "    @ObservedElement var element: ElementNode",
        "    let context: LiveContext<MyRegistry>",
        "    @State var editedScore: Int?",
        "    @State var width: CGFloat = 0",
        "    ",
        "    var score: Int {",
        "        if let str = element.attributeValue(for: \"score\"),",
        "           let score = Int(str) {",
        "            return score",
        "        } else {",
        "            return 0",
        "        }",
        "    }",
        "    ",
        "    var effectiveScore: Int {",
        "        editedScore ?? score",
        "    }",
        "",
        "    var body: some View {",
        "        HStack(spacing: 4) {",
        "            ForEach(0..<effectiveScore, id: \\.self) { index in",
        "                Image(systemName: \"heart.fill\")",
        "                    .foregroundColor(.red)",
        "            }",
        "            ForEach(effectiveScore..<5, id: \\.self) { index in",
        "                Image(systemName: \"heart\")",
        "            }",
        "        }",
        "        .imageScale(.large)",
        "    }",
        "}"
      ],
      "fileName": "CatRatingView.swift",
      "fileType": "swift",
      "highlights": [
        {
          "line": 24
        },
        {
          "line": 25
        },
        {
          "line": 26
        },
        {
          "line": 27
        },
        {
          "line": 28
        },
        {
          "line": 29
        },
        {
          "line": 30
        },
        {
          "line": 31
        },
        {
          "line": 32
        },
        {
          "line": 33
        }
      ],
      "identifier": "04-03-04-hearts.swift",
      "syntax": "swift",
      "type": "file"
    },
    "04-03-05-width-reader.swift": {
      "content": [
        "import SwiftUI",
        "import LiveViewNative",
        "",
        "struct CatRatingView: View {",
        "    @ObservedElement var element: ElementNode",
        "    let context: LiveContext<MyRegistry>",
        "    @State var editedScore: Int?",
        "    @State var width: CGFloat = 0",
        "    ",
        "    var score: Int {",
        "        if let str = element.attributeValue(for: \"score\"),",
        "           let score = Int(str) {",
        "            return score",
        "        } else {",
        "            return 0",
        "        }",
        "    }",
        "    ",
        "    var effectiveScore: Int {",
        "        editedScore ?? score",
        "    }",
        "",
        "    var body: some View {",
        "        HStack(spacing: 4) {",
        "            ForEach(0..<effectiveScore, id: \\.self) { index in",
        "                Image(systemName: \"heart.fill\")",
        "                    .foregroundColor(.red)",
        "            }",
        "            ForEach(effectiveScore..<5, id: \\.self) { index in",
        "                Image(systemName: \"heart\")",
        "            }",
        "        }",
        "        .imageScale(.large)",
        "        .background(GeometryReader { proxy in",
        "            Color.clear",
        "                .preference(key: WidthPrefKey.self, value: proxy.size.width)",
        "                .onPreferenceChange(WidthPrefKey.self, perform: { value in",
        "                    self.width = value",
        "                })",
        "        })",
        "    }",
        "    ",
        "    struct WidthPrefKey: PreferenceKey {",
        "        static var defaultValue: CGFloat = 0",
        "        ",
        "        static func reduce(value: inout CGFloat, nextValue: () -> CGFloat) {",
        "            value = nextValue()",
        "        }",
        "    }",
        "}"
      ],
      "fileName": "CatRatingView.swift",
      "fileType": "swift",
      "highlights": [
        {
          "line": 34
        },
        {
          "line": 35
        },
        {
          "line": 36
        },
        {
          "line": 37
        },
        {
          "line": 38
        },
        {
          "line": 39
        },
        {
          "line": 40
        },
        {
          "line": 42
        },
        {
          "line": 43
        },
        {
          "line": 44
        },
        {
          "line": 45
        },
        {
          "line": 46
        },
        {
          "line": 47
        },
        {
          "line": 48
        },
        {
          "line": 49
        }
      ],
      "identifier": "04-03-05-width-reader.swift",
      "syntax": "swift",
      "type": "file"
    },
    "04-03-06-gestures.swift": {
      "content": [
        "import SwiftUI",
        "import LiveViewNative",
        "",
        "struct CatRatingView: View {",
        "    @ObservedElement var element: ElementNode",
        "    let context: LiveContext<MyRegistry>",
        "    @State var editedScore: Int?",
        "    @State var width: CGFloat = 0",
        "    ",
        "    var score: Int {",
        "        if let str = element.attributeValue(for: \"score\"),",
        "           let score = Int(str) {",
        "            return score",
        "        } else {",
        "            return 0",
        "        }",
        "    }",
        "    ",
        "    var effectiveScore: Int {",
        "        editedScore ?? score",
        "    }",
        "",
        "    var body: some View {",
        "        HStack(spacing: 4) {",
        "            ForEach(0..<effectiveScore, id: \\.self) { index in",
        "                Image(systemName: \"heart.fill\")",
        "                    .foregroundColor(.red)",
        "                    .onTapGesture {",
        "                        setScore(index + 1)",
        "                    }",
        "            }",
        "            ForEach(effectiveScore..<5, id: \\.self) { index in",
        "                Image(systemName: \"heart\")",
        "                    .onTapGesture {",
        "                        setScore(index + 1)",
        "                    }",
        "            }",
        "        }",
        "        .imageScale(.large)",
        "        .background(GeometryReader { proxy in",
        "            Color.clear",
        "                .preference(key: WidthPrefKey.self, value: proxy.size.width)",
        "                .onPreferenceChange(WidthPrefKey.self, perform: { value in",
        "                    self.width = value",
        "                })",
        "        })",
        "        .gesture(DragGesture()",
        "            .onChanged({ value in",
        "                editedScore = computeScore(point: value.location)",
        "            }).onEnded({ value in",
        "                setScore(computeScore(point: value.location))",
        "            })",
        "        )",
        "    }",
        "    ",
        "    func computeScore(point: CGPoint) -> Int {",
        "        let fraction = max(0, min(1, point.x / width))",
        "        return Int(ceil(fraction * 5))",
        "    }",
        "    ",
        "    struct WidthPrefKey: PreferenceKey {",
        "        static var defaultValue: CGFloat = 0",
        "        ",
        "        static func reduce(value: inout CGFloat, nextValue: () -> CGFloat) {",
        "            value = nextValue()",
        "        }",
        "    }",
        "}"
      ],
      "fileName": "CatRatingView.swift",
      "fileType": "swift",
      "highlights": [
        {
          "line": 28
        },
        {
          "line": 29
        },
        {
          "line": 30
        },
        {
          "line": 34
        },
        {
          "line": 35
        },
        {
          "line": 36
        },
        {
          "line": 47
        },
        {
          "line": 48
        },
        {
          "line": 49
        },
        {
          "line": 50
        },
        {
          "line": 51
        },
        {
          "line": 52
        },
        {
          "line": 53
        },
        {
          "line": 56
        },
        {
          "line": 57
        },
        {
          "line": 58
        },
        {
          "line": 59
        },
        {
          "line": 60
        }
      ],
      "identifier": "04-03-06-gestures.swift",
      "syntax": "swift",
      "type": "file"
    },
    "04-03-07-pushevent.swift": {
      "content": [
        "import SwiftUI",
        "import LiveViewNative",
        "",
        "struct CatRatingView: View {",
        "    @ObservedElement var element: ElementNode",
        "    let context: LiveContext<MyRegistry>",
        "    @State var editedScore: Int?",
        "    @State var width: CGFloat = 0",
        "    ",
        "    var score: Int {",
        "        if let str = element.attributeValue(for: \"score\"),",
        "           let score = Int(str) {",
        "            return score",
        "        } else {",
        "            return 0",
        "        }",
        "    }",
        "    ",
        "    var effectiveScore: Int {",
        "        editedScore ?? score",
        "    }",
        "",
        "    var body: some View {",
        "        HStack(spacing: 4) {",
        "            ForEach(0..<effectiveScore, id: \\.self) { index in",
        "                Image(systemName: \"heart.fill\")",
        "                    .foregroundColor(.red)",
        "                    .onTapGesture {",
        "                        setScore(index + 1)",
        "                    }",
        "            }",
        "            ForEach(effectiveScore..<5, id: \\.self) { index in",
        "                Image(systemName: \"heart\")",
        "                    .onTapGesture {",
        "                        setScore(index + 1)",
        "                    }",
        "            }",
        "        }",
        "        .imageScale(.large)",
        "        .background(GeometryReader { proxy in",
        "            Color.clear",
        "                .preference(key: WidthPrefKey.self, value: proxy.size.width)",
        "                .onPreferenceChange(WidthPrefKey.self, perform: { value in",
        "                    self.width = value",
        "                })",
        "        })",
        "        .gesture(DragGesture()",
        "            .onChanged({ value in",
        "                editedScore = computeScore(point: value.location)",
        "            }).onEnded({ value in",
        "                setScore(computeScore(point: value.location))",
        "            })",
        "        )",
        "    }",
        "    ",
        "    func computeScore(point: CGPoint) -> Int {",
        "        let fraction = max(0, min(1, point.x / width))",
        "        return Int(ceil(fraction * 5))",
        "    }",
        "    ",
        "    func setScore(_ score: Int) {",
        "        Task {",
        "            editedScore = score",
        "            try? await context.coordinator.pushEvent(type: \"click\", event: \"change-score\", value: score)",
        "            editedScore = nil",
        "        }",
        "    }",
        "    ",
        "    struct WidthPrefKey: PreferenceKey {",
        "        static var defaultValue: CGFloat = 0",
        "        ",
        "        static func reduce(value: inout CGFloat, nextValue: () -> CGFloat) {",
        "            value = nextValue()",
        "        }",
        "    }",
        "}"
      ],
      "fileName": "CatRatingView.swift",
      "fileType": "swift",
      "highlights": [
        {
          "line": 61
        },
        {
          "line": 62
        },
        {
          "line": 63
        },
        {
          "line": 64
        },
        {
          "line": 65
        },
        {
          "line": 66
        },
        {
          "line": 67
        },
        {
          "line": 68
        }
      ],
      "identifier": "04-03-07-pushevent.swift",
      "syntax": "swift",
      "type": "file"
    },
    "04-04-01-change-score.ex": {
      "content": [
        "defmodule LvnTutorialWeb.CatLive do",
        "  use LvnTutorialWeb, :live_view",
        "  require EEx",
        "  alias LvnTutorial.FavoritesStore",
        "",
        "  EEx.function_from_file(",
        "    :def,",
        "    :render,",
        "    \"lib/lvn_tutorial_web/live/cat_live.ios.heex\",",
        "    [:assigns],",
        "    engine: Phoenix.LiveView.HTMLEngine",
        "  )",
        "",
        "  def mount(%{\"name\" => name}, _session, socket) do",
        "    {:ok, assign(socket, name: name, score: FavoritesStore.get_score(name))}",
        "  end",
        "",
        "  def handle_event(\"change-score\", score, socket) do",
        "    FavoritesStore.set_score(socket.assigns.name, score)",
        "    {:noreply, assign(socket, score: score)}",
        "  end",
        "end"
      ],
      "fileName": "lib/lvn_tutorial_web/live/cat_live.ex",
      "fileType": "ex",
      "highlights": [
        {
          "line": 4
        },
        {
          "line": 15
        },
        {
          "line": 17
        },
        {
          "line": 18
        },
        {
          "line": 19
        },
        {
          "line": 20
        },
        {
          "line": 21
        }
      ],
      "identifier": "04-04-01-change-score.ex",
      "syntax": "ex",
      "type": "file"
    },
    "04-04-02-cat-rating.ios.heex": {
      "content": [
        "<vstack modifiers={[%{\"type\" => \"navigation_title\", \"title\" => @title}] |> Jason.encode!}>",
        "  <asyncimage src={\"/images/cats/#{@name}.jpg\"} modifiers='[{\"type\": \"frame\", \"width\": 300, \"height\": 300}]' />",
        "  <cat-rating score={@score} />",
        "</vstack>"
      ],
      "fileName": "lib/lvn_tutorial_web/live/cat_live.ios.heex",
      "fileType": "heex",
      "highlights": [
        {
          "line": 1
        },
        {
          "line": 3
        }
      ],
      "identifier": "04-04-02-cat-rating.ios.heex",
      "syntax": "heex",
      "type": "file"
    },
    "04-04-03-preview.mp4": {
      "alt": null,
      "identifier": "04-04-03-preview.mp4",
      "poster": null,
      "type": "video",
      "variants": [
        {
          "traits": [
            "1x",
            "light"
          ],
          "url": "/videos/04-04-03-preview.mp4"
        }
      ]
    },
    "Xcode 13.3": {
      "identifier": "Xcode 13.3",
      "title": "Xcode 13.3",
      "type": "xcodeRequirement",
      "url": "https://developer.apple.com/download/applications/"
    },
    "doc://LiveViewNative/tutorials/LiveViewNative/01-Initial-List": {
      "abstract": [
        {
          "text": "In this tutorial, you’ll build a simple LiveView app to show a list of cute cats.",
          "type": "text"
        }
      ],
      "estimatedTime": "30min",
      "identifier": "doc://LiveViewNative/tutorials/LiveViewNative/01-Initial-List",
      "kind": "project",
      "role": "project",
      "title": "Your First LiveView",
      "type": "topic",
      "url": "/tutorials/liveviewnative/01-initial-list"
    },
    "doc://LiveViewNative/tutorials/LiveViewNative/01-Initial-List#Build-the-List-UI": {
      "abstract": [
        {
          "text": "In this tutorial, you’ll build a simple LiveView app to show a list of cute cats.",
          "type": "text"
        }
      ],
      "identifier": "doc://LiveViewNative/tutorials/LiveViewNative/01-Initial-List#Build-the-List-UI",
      "kind": "section",
      "role": "pseudoSymbol",
      "title": "Build the List UI",
      "type": "section",
      "url": "/tutorials/liveviewnative/01-initial-list#Build-the-List-UI"
    },
    "doc://LiveViewNative/tutorials/LiveViewNative/01-Initial-List#Building-the-Backend": {
      "abstract": [
        {
          "text": "In this tutorial, you’ll build a simple LiveView app to show a list of cute cats.",
          "type": "text"
        }
      ],
      "identifier": "doc://LiveViewNative/tutorials/LiveViewNative/01-Initial-List#Building-the-Backend",
      "kind": "section",
      "role": "pseudoSymbol",
      "title": "Building the Backend",
      "type": "section",
      "url": "/tutorials/liveviewnative/01-initial-list#Building-the-Backend"
    },
    "doc://LiveViewNative/tutorials/LiveViewNative/01-Initial-List#Creating-the-App": {
      "abstract": [
        {
          "text": "In this tutorial, you’ll build a simple LiveView app to show a list of cute cats.",
          "type": "text"
        }
      ],
      "identifier": "doc://LiveViewNative/tutorials/LiveViewNative/01-Initial-List#Creating-the-App",
      "kind": "section",
      "role": "pseudoSymbol",
      "title": "Creating the App",
      "type": "section",
      "url": "/tutorials/liveviewnative/01-initial-list#Creating-the-App"
    },
    "doc://LiveViewNative/tutorials/LiveViewNative/02-Favorite-Button": {
      "abstract": [
        {
          "text": "Now that you’ve built a simple app to display a list, let’s add a bit of interactivity. To each list row, we’ll add a favorite button that can be used to pin cats to the top of the list.",
          "type": "text"
        }
      ],
      "estimatedTime": "30min",
      "identifier": "doc://LiveViewNative/tutorials/LiveViewNative/02-Favorite-Button",
      "kind": "project",
      "role": "project",
      "title": "Storing User Favorites",
      "type": "topic",
      "url": "/tutorials/liveviewnative/02-favorite-button"
    },
    "doc://LiveViewNative/tutorials/LiveViewNative/02-Favorite-Button#Adding-the-Favorite-Button": {
      "abstract": [
        {
          "text": "Now that you’ve built a simple app to display a list, let’s add a bit of interactivity. To each list row, we’ll add a favorite button that can be used to pin cats to the top of the list.",
          "type": "text"
        }
      ],
      "identifier": "doc://LiveViewNative/tutorials/LiveViewNative/02-Favorite-Button#Adding-the-Favorite-Button",
      "kind": "section",
      "role": "pseudoSymbol",
      "title": "Adding the Favorite Button",
      "type": "section",
      "url": "/tutorials/liveviewnative/02-favorite-button#Adding-the-Favorite-Button"
    },
    "doc://LiveViewNative/tutorials/LiveViewNative/02-Favorite-Button#Updating-the-Backend": {
      "abstract": [
        {
          "text": "Now that you’ve built a simple app to display a list, let’s add a bit of interactivity. To each list row, we’ll add a favorite button that can be used to pin cats to the top of the list.",
          "type": "text"
        }
      ],
      "identifier": "doc://LiveViewNative/tutorials/LiveViewNative/02-Favorite-Button#Updating-the-Backend",
      "kind": "section",
      "role": "pseudoSymbol",
      "title": "Updating the Backend",
      "type": "section",
      "url": "/tutorials/liveviewnative/02-favorite-button#Updating-the-Backend"
    },
    "doc://LiveViewNative/tutorials/LiveViewNative/03-Navigation-and-Hero": {
      "abstract": [
        {
          "text": "The list of cats is great, but the images are a little small. Let’s add a detail view so we can see them nice and big!",
          "type": "text"
        }
      ],
      "estimatedTime": "30min",
      "identifier": "doc://LiveViewNative/tutorials/LiveViewNative/03-Navigation-and-Hero",
      "kind": "project",
      "role": "project",
      "title": "Navigation and Detail View",
      "type": "topic",
      "url": "/tutorials/liveviewnative/03-navigation-and-hero"
    },
    "doc://LiveViewNative/tutorials/LiveViewNative/03-Navigation-and-Hero#Adding-Navigation": {
      "abstract": [
        {
          "text": "The list of cats is great, but the images are a little small. Let’s add a detail view so we can see them nice and big!",
          "type": "text"
        }
      ],
      "identifier": "doc://LiveViewNative/tutorials/LiveViewNative/03-Navigation-and-Hero#Adding-Navigation",
      "kind": "section",
      "role": "pseudoSymbol",
      "title": "Adding Navigation",
      "type": "section",
      "url": "/tutorials/liveviewnative/03-navigation-and-hero#Adding-Navigation"
    },
    "doc://LiveViewNative/tutorials/LiveViewNative/03-Navigation-and-Hero#Building-the-Detail-View": {
      "abstract": [
        {
          "text": "The list of cats is great, but the images are a little small. Let’s add a detail view so we can see them nice and big!",
          "type": "text"
        }
      ],
      "identifier": "doc://LiveViewNative/tutorials/LiveViewNative/03-Navigation-and-Hero#Building-the-Detail-View",
      "kind": "section",
      "role": "pseudoSymbol",
      "title": "Building the Detail View",
      "type": "section",
      "url": "/tutorials/liveviewnative/03-navigation-and-hero#Building-the-Detail-View"
    },
    "doc://LiveViewNative/tutorials/LiveViewNative/04-Custom-Element": {
      "abstract": [
        {
          "text": "Let’s add a custom control that allows users to assign specific star ratings to cats in our app.",
          "type": "text"
        }
      ],
      "estimatedTime": "30min",
      "identifier": "doc://LiveViewNative/tutorials/LiveViewNative/04-Custom-Element",
      "kind": "project",
      "role": "project",
      "title": "Add a Custom HTML Element",
      "type": "topic",
      "url": "/tutorials/liveviewnative/04-custom-element"
    },
    "doc://LiveViewNative/tutorials/LiveViewNative/04-Custom-Element#Building-the-View": {
      "abstract": [
        {
          "text": "Let’s add a custom control that allows users to assign specific star ratings to cats in our app.",
          "type": "text"
        }
      ],
      "identifier": "doc://LiveViewNative/tutorials/LiveViewNative/04-Custom-Element#Building-the-View",
      "kind": "section",
      "role": "pseudoSymbol",
      "title": "Building the View",
      "type": "section",
      "url": "/tutorials/liveviewnative/04-custom-element#Building-the-View"
    },
    "doc://LiveViewNative/tutorials/LiveViewNative/04-Custom-Element#Setting-Up-the-Registry": {
      "abstract": [
        {
          "text": "Let’s add a custom control that allows users to assign specific star ratings to cats in our app.",
          "type": "text"
        }
      ],
      "identifier": "doc://LiveViewNative/tutorials/LiveViewNative/04-Custom-Element#Setting-Up-the-Registry",
      "kind": "section",
      "role": "pseudoSymbol",
      "title": "Setting Up the Registry",
      "type": "section",
      "url": "/tutorials/liveviewnative/04-custom-element#Setting-Up-the-Registry"
    },
    "doc://LiveViewNative/tutorials/LiveViewNative/04-Custom-Element#Update-the-GenServer": {
      "abstract": [
        {
          "text": "Let’s add a custom control that allows users to assign specific star ratings to cats in our app.",
          "type": "text"
        }
      ],
      "identifier": "doc://LiveViewNative/tutorials/LiveViewNative/04-Custom-Element#Update-the-GenServer",
      "kind": "section",
      "role": "pseudoSymbol",
      "title": "Update the GenServer",
      "type": "section",
      "url": "/tutorials/liveviewnative/04-custom-element#Update-the-GenServer"
    },
    "doc://LiveViewNative/tutorials/LiveViewNative/04-Custom-Element#Using-the-Element": {
      "abstract": [
        {
          "text": "Let’s add a custom control that allows users to assign specific star ratings to cats in our app.",
          "type": "text"
        }
      ],
      "identifier": "doc://LiveViewNative/tutorials/LiveViewNative/04-Custom-Element#Using-the-Element",
      "kind": "section",
      "role": "pseudoSymbol",
      "title": "Using the Element",
      "type": "section",
      "url": "/tutorials/liveviewnative/04-custom-element#Using-the-Element"
    },
    "doc://LiveViewNative/tutorials/LiveViewNative/05-Custom-Modifier": {
      "abstract": [
        {
          "text": "Use a custom modifier to add a navigation bar button to the detail view.",
          "type": "text"
        }
      ],
      "estimatedTime": "30min",
      "identifier": "doc://LiveViewNative/tutorials/LiveViewNative/05-Custom-Modifier",
      "kind": "project",
      "role": "project",
      "title": "Add a Navigation Bar Button with a Custom Modifier",
      "type": "topic",
      "url": "/tutorials/liveviewnative/05-custom-modifier"
    },
    "doc://LiveViewNative/tutorials/LiveViewNative/05-Custom-Modifier#Implement-the-Attribute": {
      "abstract": [
        {
          "text": "Use a custom modifier to add a navigation bar button to the detail view.",
          "type": "text"
        }
      ],
      "identifier": "doc://LiveViewNative/tutorials/LiveViewNative/05-Custom-Modifier#Implement-the-Attribute",
      "kind": "section",
      "role": "pseudoSymbol",
      "title": "Implement the Attribute",
      "type": "section",
      "url": "/tutorials/liveviewnative/05-custom-modifier#Implement-the-Attribute"
    },
    "doc://LiveViewNative/tutorials/LiveViewNative/05-Custom-Modifier#Update-the-Backend": {
      "abstract": [
        {
          "text": "Use a custom modifier to add a navigation bar button to the detail view.",
          "type": "text"
        }
      ],
      "identifier": "doc://LiveViewNative/tutorials/LiveViewNative/05-Custom-Modifier#Update-the-Backend",
      "kind": "section",
      "role": "pseudoSymbol",
      "title": "Update the Backend",
      "type": "section",
      "url": "/tutorials/liveviewnative/05-custom-modifier#Update-the-Backend"
    },
    "doc://LiveViewNative/tutorials/LiveViewNative/06-Custom-Loading-Screen": {
      "abstract": [
        {
          "text": "Add a more interesting loading screen that matches the style of your app.",
          "type": "text"
        }
      ],
      "estimatedTime": "30min",
      "identifier": "doc://LiveViewNative/tutorials/LiveViewNative/06-Custom-Loading-Screen",
      "kind": "project",
      "role": "project",
      "title": "Style the Loading Screen to Match Your App",
      "type": "topic",
      "url": "/tutorials/liveviewnative/06-custom-loading-screen"
    },
    "doc://LiveViewNative/tutorials/LiveViewNative/06-Custom-Loading-Screen#Add-the-Loading-View": {
      "abstract": [
        {
          "text": "Add a more interesting loading screen that matches the style of your app.",
          "type": "text"
        }
      ],
      "identifier": "doc://LiveViewNative/tutorials/LiveViewNative/06-Custom-Loading-Screen#Add-the-Loading-View",
      "kind": "section",
      "role": "pseudoSymbol",
      "title": "Add the Loading View",
      "type": "section",
      "url": "/tutorials/liveviewnative/06-custom-loading-screen#Add-the-Loading-View"
    },
    "doc://LiveViewNative/tutorials/YourFirstApp": {
      "abstract": [
        {
          "text": "A step-by-step guide to building your first app with LiveViewNative. Learn how to display data, handle navigation, build interactions, and more.",
          "type": "text"
        }
      ],
      "identifier": "doc://LiveViewNative/tutorials/YourFirstApp",
      "kind": "overview",
      "role": "overview",
      "title": "Your First LiveViewNative App",
      "type": "topic",
      "url": "/tutorials/yourfirstapp"
    },
    "doc://LiveViewNative/tutorials/YourFirstApp/Customize-with-Swift": {
      "abstract": [],
      "identifier": "doc://LiveViewNative/tutorials/YourFirstApp/Customize-with-Swift",
      "kind": "article",
      "role": "article",
      "title": "Customize with Swift",
      "type": "topic",
      "url": "/tutorials/yourfirstapp/customize-with-swift"
    },
    "doc://LiveViewNative/tutorials/YourFirstApp/Getting-Started": {
      "abstract": [],
      "identifier": "doc://LiveViewNative/tutorials/YourFirstApp/Getting-Started",
      "kind": "article",
      "role": "article",
      "title": "Getting Started",
      "type": "topic",
      "url": "/tutorials/yourfirstapp/getting-started"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [
    {
      "backgroundImage": "04-00-intro-header.png",
      "chapter": "Customize with Swift",
      "content": [
        {
          "inlineContent": [
            {
              "text": "Let’s add a custom control that allows users to assign specific star ratings to cats in our app.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "estimatedTimeInMinutes": 30,
      "image": "04-00-intro-header.png",
      "kind": "hero",
      "title": "Add a Custom HTML Element",
      "xcodeRequirement": "Xcode 13.3"
    },
    {
      "kind": "tasks",
      "tasks": [
        {
          "anchor": "Setting-Up-the-Registry",
          "contentSection": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Setup the custom registry and connecting it to the coordinator.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "kind": "fullWidth"
            }
          ],
          "stepsSection": [
            {
              "caption": [
                {
                  "inlineContent": [
                    {
                      "text": "The ",
                      "type": "text"
                    },
                    {
                      "code": "CustomRegistry",
                      "type": "codeVoice"
                    },
                    {
                      "text": " protocol defines the interface you use to provide custom elements and attributes to LiveView Native.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "code": "04-01-01-registry.swift",
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "In the iOS app, create a new file called ",
                      "type": "text"
                    },
                    {
                      "code": "MyRegistry.swift",
                      "type": "codeVoice"
                    },
                    {
                      "text": " which will contain the custom registry implementation.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "media": null,
              "runtimePreview": null,
              "type": "step"
            },
            {
              "caption": [
                {
                  "inlineContent": [
                    {
                      "text": "The ",
                      "type": "text"
                    },
                    {
                      "code": "lookup",
                      "type": "codeVoice"
                    },
                    {
                      "text": " method is called by the framework when it encounters a element with one of your declared tag names.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "code": "04-01-02-tag.swift",
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The ",
                      "type": "text"
                    },
                    {
                      "code": "TagName",
                      "type": "codeVoice"
                    },
                    {
                      "text": " enum defines all of the custom elements that your registry can handle.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "media": null,
              "runtimePreview": null,
              "type": "step"
            },
            {
              "caption": [],
              "code": "04-01-03-modifier.swift",
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Then, define a type alias called ",
                      "type": "text"
                    },
                    {
                      "code": "ModifierType",
                      "type": "codeVoice"
                    },
                    {
                      "text": " that is ",
                      "type": "text"
                    },
                    {
                      "code": "EmptyRegistry.None",
                      "type": "codeVoice"
                    },
                    {
                      "text": ". This tells the framework that your registry doesn’t support any custom modifiers.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "media": null,
              "runtimePreview": null,
              "type": "step"
            },
            {
              "caption": [
                {
                  "inlineContent": [
                    {
                      "text": "The ",
                      "type": "text"
                    },
                    {
                      "code": "context",
                      "type": "codeVoice"
                    },
                    {
                      "text": " is a ",
                      "type": "text"
                    },
                    {
                      "code": "LiveContext",
                      "type": "codeVoice"
                    },
                    {
                      "text": " struct containing additional information about the context in which the element is being used.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "code": "04-01-04-view.swift",
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "In the ",
                      "type": "text"
                    },
                    {
                      "code": "lookup",
                      "type": "codeVoice"
                    },
                    {
                      "text": " method, we’ll construct a ",
                      "type": "text"
                    },
                    {
                      "code": "CatRatingView",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", passing in the ",
                      "type": "text"
                    },
                    {
                      "code": "context",
                      "type": "codeVoice"
                    },
                    {
                      "text": " parameter of the lookup method. This will cause a compiler error, but don’t worry; in Section 3, we’ll implement the view and resolve it.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "media": null,
              "runtimePreview": null,
              "type": "step"
            },
            {
              "caption": [],
              "code": "03-02-01-navigationmode.swift",
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Next, open the ",
                      "type": "text"
                    },
                    {
                      "code": "ContentView.swift",
                      "type": "codeVoice"
                    },
                    {
                      "text": " file.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "media": null,
              "runtimePreview": null,
              "type": "step"
            },
            {
              "caption": [
                {
                  "inlineContent": [
                    {
                      "text": "All the methods and properties on the registry are ",
                      "type": "text"
                    },
                    {
                      "code": "static",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", so rather than constructing an instance of it, we only need to provide its type as a generic parameter to the coordinator.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "code": "04-01-05-coordinator.swift",
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Lastly, update how the coordinator is constructed so that it uses our custom registry.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "media": null,
              "runtimePreview": null,
              "type": "step"
            }
          ],
          "title": "Setting Up the Registry"
        },
        {
          "anchor": "Update-the-GenServer",
          "contentSection": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Let’s quickly update the GenServer on the backend to store the scores as well as the favorite state.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "kind": "fullWidth"
            }
          ],
          "stepsSection": [
            {
              "caption": [],
              "code": "02-01-01-genserver.ex",
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Open the ",
                      "type": "text"
                    },
                    {
                      "code": "favorites_store.ex",
                      "type": "codeVoice"
                    },
                    {
                      "text": " file.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "media": null,
              "runtimePreview": null,
              "type": "step"
            },
            {
              "caption": [],
              "code": "04-02-01-genserver.ex",
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Update the favorites store to have as its state a map of names to scores, in addition to the list of favorites.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "media": null,
              "runtimePreview": null,
              "type": "step"
            },
            {
              "inlineContent": [
                {
                  "text": "Make sure to restart the Phoenix server after updating the GenServer, because the old in-memory state will be invalid!",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "title": "Update the GenServer"
        },
        {
          "anchor": "Building-the-View",
          "contentSection": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Now that the registry is all setup, let’s build the actual SwiftUI view our custom element is going to use.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "kind": "fullWidth"
            }
          ],
          "stepsSection": [
            {
              "caption": [],
              "code": "04-03-01-empty-view.swift",
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Create the ",
                      "type": "text"
                    },
                    {
                      "code": "CatRatingView",
                      "type": "codeVoice"
                    },
                    {
                      "text": " struct. This will conform to SwiftUI’s ",
                      "type": "text"
                    },
                    {
                      "code": "View",
                      "type": "codeVoice"
                    },
                    {
                      "text": " protocol and have fields for the element and context.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "media": null,
              "runtimePreview": null,
              "type": "step"
            },
            {
              "caption": [
                {
                  "inlineContent": [
                    {
                      "text": "The score is read from the ",
                      "type": "text"
                    },
                    {
                      "code": "score",
                      "type": "codeVoice"
                    },
                    {
                      "text": " attribute on the DOM element and converted to an integer, falling back to 0 if that fails.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "code": "04-03-02-initializer.swift",
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Next, let’s add properties for the element, context, and score. The ",
                      "type": "text"
                    },
                    {
                      "code": "ObservedElement",
                      "type": "codeVoice"
                    },
                    {
                      "text": " property wrapper provides access to the element that defined this view, and will automatically update the view whenever there’s a change to the element.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "media": null,
              "runtimePreview": null,
              "type": "step"
            },
            {
              "caption": [],
              "code": "04-03-03-properties.swift",
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Add a couple of ",
                      "type": "text"
                    },
                    {
                      "code": "@State",
                      "type": "codeVoice"
                    },
                    {
                      "text": " variables that will be used for building the interaction. The ",
                      "type": "text"
                    },
                    {
                      "code": "editedScore",
                      "type": "codeVoice"
                    },
                    {
                      "text": " variable will hold the current score as the user is dragging their finger to edit it, but before it’s been committed. The ",
                      "type": "text"
                    },
                    {
                      "code": "width",
                      "type": "codeVoice"
                    },
                    {
                      "text": " variable will store the width of the view on screen, which is needed to turn the absolute position of the user’s finger into a fraction. Finally, ",
                      "type": "text"
                    },
                    {
                      "code": "effectiveScore",
                      "type": "codeVoice"
                    },
                    {
                      "text": " is a helper property that the view body wil use to read the score that should currently be displayed.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "media": null,
              "runtimePreview": null,
              "type": "step"
            },
            {
              "caption": [],
              "code": "04-03-04-hearts.swift",
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "In the view body, we’ll use an ",
                      "type": "text"
                    },
                    {
                      "code": "HStack",
                      "type": "codeVoice"
                    },
                    {
                      "text": " with two ",
                      "type": "text"
                    },
                    {
                      "code": "ForEach",
                      "type": "codeVoice"
                    },
                    {
                      "text": " loops to display a set of heart icons. Based on the effective score, some number of them will be filled in and colored red to indicate the current score.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "media": null,
              "runtimePreview": null,
              "type": "step"
            },
            {
              "caption": [
                {
                  "inlineContent": [
                    {
                      "text": "This is in a ",
                      "type": "text"
                    },
                    {
                      "code": ".background",
                      "type": "codeVoice"
                    },
                    {
                      "text": " modifier so that it doesn’t affect the size of our view. A SwiftUI view preference is used to communicate the ",
                      "type": "text"
                    },
                    {
                      "code": "GeometryReader",
                      "type": "codeVoice"
                    },
                    {
                      "text": " width up to our view without altering state during the evaluation of the body, which SwiftUI forbids.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "code": "04-03-05-width-reader.swift",
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Next, a ",
                      "type": "text"
                    },
                    {
                      "code": "GeometryReader",
                      "type": "codeVoice"
                    },
                    {
                      "text": " in the background will read the width of the view into the ",
                      "type": "text"
                    },
                    {
                      "code": "@State",
                      "type": "codeVoice"
                    },
                    {
                      "text": " variable we set up before.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "media": null,
              "runtimePreview": null,
              "type": "step"
            },
            {
              "caption": [
                {
                  "inlineContent": [
                    {
                      "text": "The desired score is calculated by looking at the X position of the tap/drag relative to the full width of the view, and converting that into a number from 0 through 5.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "code": "04-03-06-gestures.swift",
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "We’ll add a ",
                      "type": "text"
                    },
                    {
                      "code": "DragGesture",
                      "type": "codeVoice"
                    },
                    {
                      "text": " to the row and tap gestures to the individual hearts to allow the user to either tap on a heart or to drag their finger across the row to set the score.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "media": null,
              "runtimePreview": null,
              "type": "step"
            },
            {
              "caption": [
                {
                  "inlineContent": [
                    {
                      "text": "The ",
                      "type": "text"
                    },
                    {
                      "code": "type",
                      "type": "codeVoice"
                    },
                    {
                      "text": " parameter to ",
                      "type": "text"
                    },
                    {
                      "code": "pushEvent",
                      "type": "codeVoice"
                    },
                    {
                      "text": " can be anything you like; here we use “click” because it matches a type already used by LiveView on the web. The ",
                      "type": "text"
                    },
                    {
                      "code": "name",
                      "type": "codeVoice"
                    },
                    {
                      "text": " parameter is the name of the event handler that will be invoked on the backend.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "code": "04-03-07-pushevent.swift",
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Finally, we’ll implement the ",
                      "type": "text"
                    },
                    {
                      "code": "setScore",
                      "type": "codeVoice"
                    },
                    {
                      "text": " method to send an event with the new score to the backend using ",
                      "type": "text"
                    },
                    {
                      "code": "LiveViewCoordinator/pushEvent(type:event:value:)",
                      "type": "codeVoice"
                    },
                    {
                      "text": ".",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "media": null,
              "runtimePreview": null,
              "type": "step"
            }
          ],
          "title": "Building the View"
        },
        {
          "anchor": "Using-the-Element",
          "contentSection": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Finally, let’s update the backend to use the newly added element.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "kind": "fullWidth"
            }
          ],
          "stepsSection": [
            {
              "caption": [],
              "code": "03-01-02-cat_live.ex",
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Open ",
                      "type": "text"
                    },
                    {
                      "code": "cat_live.ex",
                      "type": "codeVoice"
                    },
                    {
                      "text": ".",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "media": null,
              "runtimePreview": null,
              "type": "step"
            },
            {
              "caption": [],
              "code": "04-04-01-change-score.ex",
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Update the ",
                      "type": "text"
                    },
                    {
                      "code": "mount",
                      "type": "codeVoice"
                    },
                    {
                      "text": " callback to assign the current score from the store to the socket, and add a new event handler called ",
                      "type": "text"
                    },
                    {
                      "code": "change-score",
                      "type": "codeVoice"
                    },
                    {
                      "text": " which updates the favorites store and then assigns the new score to the socket.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "media": null,
              "runtimePreview": null,
              "type": "step"
            },
            {
              "caption": [],
              "code": "03-01-03-cat_live.ios.heex",
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Edit the ",
                      "type": "text"
                    },
                    {
                      "code": "cat_live.ios.heex",
                      "type": "codeVoice"
                    },
                    {
                      "text": " template.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "media": null,
              "runtimePreview": null,
              "type": "step"
            },
            {
              "caption": [
                {
                  "inlineContent": [
                    {
                      "text": "With that, you can re-run the app and view and edit scores to your heart’s content!",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "code": "04-04-02-cat-rating.ios.heex",
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Add the ",
                      "type": "text"
                    },
                    {
                      "code": "<cat-rating>",
                      "type": "codeVoice"
                    },
                    {
                      "text": " element to the template below the image, assigning the ",
                      "type": "text"
                    },
                    {
                      "code": "score",
                      "type": "codeVoice"
                    },
                    {
                      "text": " attribute from the assign.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "media": null,
              "runtimePreview": "04-04-03-preview.mp4",
              "type": "step"
            }
          ],
          "title": "Using the Element"
        }
      ]
    },
    {
      "abstract": [
        {
          "text": "Use a custom modifier to add a navigation bar button to the detail view.",
          "type": "text"
        }
      ],
      "action": {
        "identifier": "doc://LiveViewNative/tutorials/LiveViewNative/05-Custom-Modifier",
        "isActive": true,
        "overridingTitle": "Get started",
        "overridingTitleInlineContent": [
          {
            "text": "Get started",
            "type": "text"
          }
        ],
        "type": "reference"
      },
      "featuredEyebrow": "Tutorial",
      "kind": "callToAction",
      "title": "Add a Navigation Bar Button with a Custom Modifier"
    }
  ],
  "variants": [
    {
      "paths": [
        "/tutorials/liveviewnative/04-custom-element"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}