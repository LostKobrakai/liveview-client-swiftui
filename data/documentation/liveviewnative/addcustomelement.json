{
  "abstract": [
    {
      "text": "Use the ",
      "type": "text"
    },
    {
      "identifier": "doc://LiveViewNative/documentation/LiveViewNative/CustomRegistry",
      "isActive": true,
      "type": "reference"
    },
    {
      "text": " protocol to define how DOM elements are converted to SwiftUI views.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://LiveViewNative/documentation/LiveViewNative"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://LiveViewNative/documentation/LiveViewNative/AddCustomElement"
  },
  "kind": "article",
  "metadata": {
    "modules": [
      {
        "name": "LiveViewNative"
      }
    ],
    "role": "article",
    "roleHeading": "Article",
    "title": "Adding Custom Elements"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "If you don’t already have one, create a type that conforms to the ",
              "type": "text"
            },
            {
              "identifier": "doc://LiveViewNative/documentation/LiveViewNative/CustomRegistry",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " protocol and provide it as the generic type parameter to your ",
              "type": "text"
            },
            {
              "identifier": "doc://LiveViewNative/documentation/LiveViewNative/LiveViewCoordinator",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct MyRegistry: CustomRegistry {",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Then, add an enum type called ",
              "type": "text"
            },
            {
              "code": "TagName",
              "type": "codeVoice"
            },
            {
              "text": " that has strings for raw values. This type is what the framework uses to check if your custom registry supports a given tag name. All of the string values should be lowercase, otherwise the framework will not support them. In the following example, ",
              "type": "text"
            },
            {
              "code": "<my-tag>",
              "type": "codeVoice"
            },
            {
              "text": " elements in the DOM will be converted to the ",
              "type": "text"
            },
            {
              "code": ".myTag",
              "type": "codeVoice"
            },
            {
              "text": " name.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct MyRegistry: CustomRegistry {",
            "    enum TagName: String {",
            "        case myTag = \"my-tag\"",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "To provide views for these elements, implement the ",
              "type": "text"
            },
            {
              "identifier": "doc://LiveViewNative/documentation/LiveViewNative/CustomRegistry/lookup(_:element:context:)-895au",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " method. Your implementation of this method is automatically treated as SwiftUI ",
              "type": "text"
            },
            {
              "code": "ViewBuilder",
              "type": "codeVoice"
            },
            {
              "text": ", so simply construct the view you want to use rather than returning it.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "In the following example, the element ",
              "type": "text"
            },
            {
              "code": "<my-tag />",
              "type": "codeVoice"
            },
            {
              "text": " in the DOM will be displayed as the text “My custom element!”",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct MyRegistry: CustomRegistry {",
            "    enum TagName: String {",
            "        case myTag = \"my-tag\"",
            "    }",
            "    static func lookup(_ name: TagName, element: ElementNode, context: LiveContext<MyRegistry>) -> some View {",
            "        switch name {",
            "        case .myTag:",
            "            Text(\"My custom element!\")",
            "        }",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Because an enum is used for the tag name, do not include a ",
              "type": "text"
            },
            {
              "code": "default",
              "type": "codeVoice"
            },
            {
              "text": " branch in your ",
              "type": "text"
            },
            {
              "code": "switch",
              "type": "codeVoice"
            },
            {
              "text": " statement so that Swift will check it for exhaustiveness.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://LiveViewNative/documentation/LiveViewNative": {
      "abstract": [],
      "identifier": "doc://LiveViewNative/documentation/LiveViewNative",
      "kind": "symbol",
      "role": "collection",
      "title": "LiveViewNative",
      "type": "topic",
      "url": "/documentation/liveviewnative"
    },
    "doc://LiveViewNative/documentation/LiveViewNative/AddCustomModifier": {
      "abstract": [
        {
          "text": "Use the ",
          "type": "text"
        },
        {
          "identifier": "doc://LiveViewNative/documentation/LiveViewNative/CustomRegistry",
          "isActive": true,
          "type": "reference"
        },
        {
          "text": " protocol to define how custom modifiers in the DOM are handled.",
          "type": "text"
        }
      ],
      "identifier": "doc://LiveViewNative/documentation/LiveViewNative/AddCustomModifier",
      "kind": "article",
      "role": "article",
      "title": "Adding Custom Modifiers",
      "type": "topic",
      "url": "/documentation/liveviewnative/addcustommodifier"
    },
    "doc://LiveViewNative/documentation/LiveViewNative/CustomRegistry": {
      "abstract": [
        {
          "text": "A custom registry allows clients to include custom view types in the LiveView DOM.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CustomRegistry"
        }
      ],
      "identifier": "doc://LiveViewNative/documentation/LiveViewNative/CustomRegistry",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CustomRegistry"
        }
      ],
      "role": "symbol",
      "title": "CustomRegistry",
      "type": "topic",
      "url": "/documentation/liveviewnative/customregistry"
    },
    "doc://LiveViewNative/documentation/LiveViewNative/CustomRegistry/lookup(_:element:context:)-895au": {
      "abstract": [
        {
          "text": "This method is called by LiveView Native when it needs to construct a custom view.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "lookup"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:14LiveViewNative14CustomRegistryP7TagNameQa",
          "text": "TagName"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "element"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:14LiveViewNative11ElementNodeV",
          "text": "ElementNode"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "context"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:14LiveViewNative0A7ContextV",
          "text": "LiveContext"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ">) -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:14LiveViewNative14CustomRegistryP0dB0Qa",
          "text": "CustomView"
        }
      ],
      "identifier": "doc://LiveViewNative/documentation/LiveViewNative/CustomRegistry/lookup(_:element:context:)-895au",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "lookup(_:element:context:)",
      "type": "topic",
      "url": "/documentation/liveviewnative/customregistry/lookup(_:element:context:)-895au"
    },
    "doc://LiveViewNative/documentation/LiveViewNative/LiveContext": {
      "abstract": [
        {
          "text": "The context provides information at initialization-time to views in a LiveView.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "LiveContext"
        }
      ],
      "identifier": "doc://LiveViewNative/documentation/LiveViewNative/LiveContext",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "LiveContext"
        }
      ],
      "role": "symbol",
      "title": "LiveContext",
      "type": "topic",
      "url": "/documentation/liveviewnative/livecontext"
    },
    "doc://LiveViewNative/documentation/LiveViewNative/LiveViewCoordinator": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "LiveViewCoordinator"
        }
      ],
      "identifier": "doc://LiveViewNative/documentation/LiveViewNative/LiveViewCoordinator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "LiveViewCoordinator"
        }
      ],
      "role": "symbol",
      "title": "LiveViewCoordinator",
      "type": "topic",
      "url": "/documentation/liveviewnative/liveviewcoordinator"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "generated": true,
      "identifiers": [
        "doc://LiveViewNative/documentation/LiveViewNative/AddCustomModifier",
        "doc://LiveViewNative/documentation/LiveViewNative/CustomRegistry",
        "doc://LiveViewNative/documentation/LiveViewNative/LiveContext"
      ],
      "title": "Custom DOM Elements and Attributes"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/liveviewnative/addcustomelement"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}