{
  "abstract" : [
    {
      "text" : "A form value is any type that can be stored in a ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/FormModel",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " and used with ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/FormState",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/LiveViewNative\/documentation\/LiveViewNative"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/FormValue"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "s:14LiveViewNative9FormValueP",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "protocol"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "FormValue"
      }
    ],
    "modules" : [
      {
        "name" : "LiveViewNative"
      }
    ],
    "navigatorTitle" : [
      {
        "kind" : "identifier",
        "text" : "FormValue"
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Protocol",
    "symbolKind" : "protocol",
    "title" : "FormValue"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "iOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "protocol"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "FormValue"
            },
            {
              "kind" : "text",
              "text" : " : "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:Se",
              "text" : "Decodable"
            },
            {
              "kind" : "text",
              "text" : ", "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:SE",
              "text" : "Encodable"
            },
            {
              "kind" : "text",
              "text" : ", "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:SQ",
              "text" : "Equatable"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "content" : [
        {
          "anchor" : "overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "Codable",
              "type" : "codeVoice"
            },
            {
              "text" : " representation is used for sending form events and when a live binding is used.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "See ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/FormState",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " for more information about how form values and live bindings interact.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A number of out-of-the-box ",
              "type" : "text"
            },
            {
              "code" : "FormValue",
              "type" : "codeVoice"
            },
            {
              "text" : " implementations are provided:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "Optional",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", when the ",
                      "type" : "text"
                    },
                    {
                      "code" : "Wrapped",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " type itself conforms to ",
                      "type" : "text"
                    },
                    {
                      "code" : "FormValue",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "String",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "Bool",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "Double",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "Date",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "orderedList"
        }
      ],
      "kind" : "content"
    }
  ],
  "references" : {
    "doc:\/\/LiveViewNative\/documentation\/LiveViewNative" : {
      "abstract" : [
        {
          "text" : "Use Phoenix LiveView to build native iOS apps with SwiftUI.",
          "type" : "text"
        }
      ],
      "identifier" : "doc:\/\/LiveViewNative\/documentation\/LiveViewNative",
      "kind" : "symbol",
      "role" : "collection",
      "title" : "LiveViewNative",
      "type" : "topic",
      "url" : "\/documentation\/liveviewnative"
    },
    "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/AttributeDecodable" : {
      "abstract" : [
        {
          "text" : "A type that conforms to this protocol can be decoded from a DOM attribute key\/value pair.",
          "type" : "text"
        }
      ],
      "fragments" : [
        {
          "kind" : "keyword",
          "text" : "protocol"
        },
        {
          "kind" : "text",
          "text" : " "
        },
        {
          "kind" : "identifier",
          "text" : "AttributeDecodable"
        }
      ],
      "identifier" : "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/AttributeDecodable",
      "kind" : "symbol",
      "navigatorTitle" : [
        {
          "kind" : "identifier",
          "text" : "AttributeDecodable"
        }
      ],
      "role" : "symbol",
      "title" : "AttributeDecodable",
      "type" : "topic",
      "url" : "\/documentation\/liveviewnative\/attributedecodable"
    },
    "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/FormControls" : {
      "abstract" : [
        {
          "text" : "See how to build custom form controls that integrate with the form data model and events.",
          "type" : "text"
        }
      ],
      "identifier" : "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/FormControls",
      "kind" : "article",
      "role" : "article",
      "title" : "Building Form Controls",
      "type" : "topic",
      "url" : "\/documentation\/liveviewnative\/formcontrols"
    },
    "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/FormModel" : {
      "abstract" : [
        {
          "text" : "A form model stores the working copy of the data for a specific ",
          "type" : "text"
        },
        {
          "code" : "<form>",
          "type" : "codeVoice"
        },
        {
          "text" : " element.",
          "type" : "text"
        }
      ],
      "fragments" : [
        {
          "kind" : "keyword",
          "text" : "class"
        },
        {
          "kind" : "text",
          "text" : " "
        },
        {
          "kind" : "identifier",
          "text" : "FormModel"
        }
      ],
      "identifier" : "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/FormModel",
      "kind" : "symbol",
      "navigatorTitle" : [
        {
          "kind" : "identifier",
          "text" : "FormModel"
        }
      ],
      "role" : "symbol",
      "title" : "FormModel",
      "type" : "topic",
      "url" : "\/documentation\/liveviewnative\/formmodel"
    },
    "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/FormState" : {
      "abstract" : [
        {
          "text" : "A property wrapper that stores the primary value of a form element.",
          "type" : "text"
        }
      ],
      "fragments" : [
        {
          "kind" : "keyword",
          "text" : "struct"
        },
        {
          "kind" : "text",
          "text" : " "
        },
        {
          "kind" : "identifier",
          "text" : "FormState"
        }
      ],
      "identifier" : "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/FormState",
      "kind" : "symbol",
      "navigatorTitle" : [
        {
          "kind" : "identifier",
          "text" : "FormState"
        }
      ],
      "role" : "symbol",
      "title" : "FormState",
      "type" : "topic",
      "url" : "\/documentation\/liveviewnative\/formstate"
    },
    "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/FormValue" : {
      "abstract" : [
        {
          "text" : "A form value is any type that can be stored in a ",
          "type" : "text"
        },
        {
          "identifier" : "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/FormModel",
          "isActive" : true,
          "type" : "reference"
        },
        {
          "text" : " and used with ",
          "type" : "text"
        },
        {
          "identifier" : "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/FormState",
          "isActive" : true,
          "type" : "reference"
        },
        {
          "text" : ".",
          "type" : "text"
        }
      ],
      "fragments" : [
        {
          "kind" : "keyword",
          "text" : "protocol"
        },
        {
          "kind" : "text",
          "text" : " "
        },
        {
          "kind" : "identifier",
          "text" : "FormValue"
        }
      ],
      "identifier" : "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/FormValue",
      "kind" : "symbol",
      "navigatorTitle" : [
        {
          "kind" : "identifier",
          "text" : "FormValue"
        }
      ],
      "role" : "symbol",
      "title" : "FormValue",
      "type" : "topic",
      "url" : "\/documentation\/liveviewnative\/formvalue"
    },
    "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/Foundation\/Date" : {
      "abstract" : [
        {
          "text" : "Decodes a date from an attribute, if it is present.",
          "type" : "text"
        },
        {
          "text" : " ",
          "type" : "text"
        },
        {
          "text" : "The value is interpreted as an Elixir-style ISO 8601 date with an optional time component.",
          "type" : "text"
        }
      ],
      "fragments" : [
        {
          "kind" : "keyword",
          "text" : "extension"
        },
        {
          "kind" : "text",
          "text" : " "
        },
        {
          "kind" : "identifier",
          "preciseIdentifier" : "s:10Foundation4DateV",
          "text" : "Date"
        }
      ],
      "identifier" : "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/Foundation\/Date",
      "kind" : "symbol",
      "navigatorTitle" : [
        {
          "kind" : "identifier",
          "text" : "Date"
        }
      ],
      "role" : "symbol",
      "title" : "Date",
      "type" : "topic",
      "url" : "\/documentation\/liveviewnative\/foundation\/date"
    },
    "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/Swift\/Bool" : {
      "abstract" : [
        {
          "text" : "Decodes a boolean from an attribute.",
          "type" : "text"
        },
        {
          "text" : " ",
          "type" : "text"
        },
        {
          "text" : "The value is ",
          "type" : "text"
        },
        {
          "code" : "true",
          "type" : "codeVoice"
        },
        {
          "text" : " if the attribute is present (regardless of value) and ",
          "type" : "text"
        },
        {
          "code" : "false",
          "type" : "codeVoice"
        },
        {
          "text" : " otherwise.",
          "type" : "text"
        }
      ],
      "fragments" : [
        {
          "kind" : "keyword",
          "text" : "extension"
        },
        {
          "kind" : "text",
          "text" : " "
        },
        {
          "kind" : "identifier",
          "preciseIdentifier" : "s:Sb",
          "text" : "Bool"
        }
      ],
      "identifier" : "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/Swift\/Bool",
      "kind" : "symbol",
      "navigatorTitle" : [
        {
          "kind" : "identifier",
          "text" : "Bool"
        }
      ],
      "role" : "symbol",
      "title" : "Bool",
      "type" : "topic",
      "url" : "\/documentation\/liveviewnative\/swift\/bool"
    },
    "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/Swift\/Double" : {
      "abstract" : [
        {
          "text" : "Decodes a double from an attribute, if it is present.",
          "type" : "text"
        }
      ],
      "fragments" : [
        {
          "kind" : "keyword",
          "text" : "extension"
        },
        {
          "kind" : "text",
          "text" : " "
        },
        {
          "kind" : "identifier",
          "preciseIdentifier" : "s:Sd",
          "text" : "Double"
        }
      ],
      "identifier" : "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/Swift\/Double",
      "kind" : "symbol",
      "navigatorTitle" : [
        {
          "kind" : "identifier",
          "text" : "Double"
        }
      ],
      "role" : "symbol",
      "title" : "Double",
      "type" : "topic",
      "url" : "\/documentation\/liveviewnative\/swift\/double"
    },
    "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/Swift\/Optional" : {
      "abstract" : [
        {
          "text" : "Decodes an optional value (where the wrapped type is itself ",
          "type" : "text"
        },
        {
          "identifier" : "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/AttributeDecodable",
          "isActive" : true,
          "type" : "reference"
        },
        {
          "text" : ") type from an attribute.",
          "type" : "text"
        }
      ],
      "conformance" : {
        "availabilityPrefix" : [
          {
            "text" : "Available when",
            "type" : "text"
          }
        ],
        "conformancePrefix" : [
          {
            "text" : "Conforms when",
            "type" : "text"
          }
        ],
        "constraints" : [
          {
            "code" : "Wrapped",
            "type" : "codeVoice"
          },
          {
            "text" : " conforms to ",
            "type" : "text"
          },
          {
            "code" : "FormValue",
            "type" : "codeVoice"
          },
          {
            "text" : ".",
            "type" : "text"
          }
        ]
      },
      "fragments" : [
        {
          "kind" : "keyword",
          "text" : "extension"
        },
        {
          "kind" : "text",
          "text" : " "
        },
        {
          "kind" : "identifier",
          "preciseIdentifier" : "s:Sq",
          "text" : "Optional"
        }
      ],
      "identifier" : "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/Swift\/Optional",
      "kind" : "symbol",
      "navigatorTitle" : [
        {
          "kind" : "identifier",
          "text" : "Optional"
        }
      ],
      "role" : "symbol",
      "title" : "Optional",
      "type" : "topic",
      "url" : "\/documentation\/liveviewnative\/swift\/optional"
    },
    "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/Swift\/Set" : {
      "abstract" : [

      ],
      "conformance" : {
        "availabilityPrefix" : [
          {
            "text" : "Available when",
            "type" : "text"
          }
        ],
        "conformancePrefix" : [
          {
            "text" : "Conforms when",
            "type" : "text"
          }
        ],
        "constraints" : [
          {
            "code" : "Element",
            "type" : "codeVoice"
          },
          {
            "text" : " conforms to ",
            "type" : "text"
          },
          {
            "code" : "FormValue",
            "type" : "codeVoice"
          },
          {
            "text" : " and ",
            "type" : "text"
          },
          {
            "code" : "Hashable",
            "type" : "codeVoice"
          },
          {
            "text" : ".",
            "type" : "text"
          }
        ]
      },
      "fragments" : [
        {
          "kind" : "keyword",
          "text" : "extension"
        },
        {
          "kind" : "text",
          "text" : " "
        },
        {
          "kind" : "identifier",
          "preciseIdentifier" : "s:Sh",
          "text" : "Set"
        }
      ],
      "identifier" : "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/Swift\/Set",
      "kind" : "symbol",
      "navigatorTitle" : [
        {
          "kind" : "identifier",
          "text" : "Set"
        }
      ],
      "role" : "symbol",
      "title" : "Set",
      "type" : "topic",
      "url" : "\/documentation\/liveviewnative\/swift\/set"
    },
    "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/Swift\/String" : {
      "abstract" : [
        {
          "text" : "Decodes a string from an attribute, if the attribute is present.",
          "type" : "text"
        }
      ],
      "fragments" : [
        {
          "kind" : "keyword",
          "text" : "extension"
        },
        {
          "kind" : "text",
          "text" : " "
        },
        {
          "kind" : "identifier",
          "preciseIdentifier" : "s:SS",
          "text" : "String"
        }
      ],
      "identifier" : "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/Swift\/String",
      "kind" : "symbol",
      "navigatorTitle" : [
        {
          "kind" : "identifier",
          "text" : "String"
        }
      ],
      "role" : "symbol",
      "title" : "String",
      "type" : "topic",
      "url" : "\/documentation\/liveviewnative\/swift\/string"
    },
    "doc:\/\/LiveViewNative\/Se" : {
      "identifier" : "doc:\/\/LiveViewNative\/Se",
      "title" : "Swift.Decodable",
      "type" : "unresolvable"
    },
    "doc:\/\/LiveViewNative\/SE" : {
      "identifier" : "doc:\/\/LiveViewNative\/SE",
      "title" : "Swift.Encodable",
      "type" : "unresolvable"
    },
    "doc:\/\/LiveViewNative\/SQ" : {
      "identifier" : "doc:\/\/LiveViewNative\/SQ",
      "title" : "Swift.Equatable",
      "type" : "unresolvable"
    }
  },
  "relationshipsSections" : [
    {
      "identifiers" : [
        "doc:\/\/LiveViewNative\/Se",
        "doc:\/\/LiveViewNative\/SE",
        "doc:\/\/LiveViewNative\/SQ"
      ],
      "kind" : "relationships",
      "title" : "Inherits From",
      "type" : "inheritsFrom"
    },
    {
      "identifiers" : [
        "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/Swift\/Bool",
        "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/Foundation\/Date",
        "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/Swift\/Double",
        "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/Swift\/Optional",
        "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/Swift\/Set",
        "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/Swift\/String"
      ],
      "kind" : "relationships",
      "title" : "Conforming Types",
      "type" : "conformingTypes"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "seeAlsoSections" : [
    {
      "generated" : true,
      "identifiers" : [
        "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/FormControls",
        "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/FormState",
        "doc:\/\/LiveViewNative\/documentation\/LiveViewNative\/FormModel"
      ],
      "title" : "Form Controls"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/liveviewnative\/formvalue"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
}